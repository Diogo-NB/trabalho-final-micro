CCS PCM C Compiler, Version 5.076, 56587               01-dez-24 12:59

               Filename:   C:\projects\trabalho_final_microcontroladores\main.lst

               ROM used:   2494 words (30%)
                           Largest free fragment is 2048
               RAM used:   55 (15%) at main() level
                           65 (18%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  06
0001:  MOVWF  0A
0002:  GOTO   6D3
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   2CB
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
002F:  BCF    0A.0
0030:  BCF    0A.1
0031:  BCF    0A.2
0032:  ADDWF  02,F
0033:  RETLW  08
0034:  RETLW  00
0035:  RETLW  00
0036:  RETLW  01
0037:  RETLW  02
0038:  RETLW  04
0039:  RETLW  48
003A:  RETLW  40
003B:  RETLW  40
003C:  RETLW  41
003D:  RETLW  42
003E:  RETLW  44
003F:  BCF    0A.0
0040:  BCF    0A.1
0041:  BCF    0A.2
0042:  ADDWF  02,F
0043:  RETLW  00
0044:  RETLW  08
0045:  RETLW  01
0046:  RETLW  00
0047:  RETLW  00
0048:  RETLW  00
0049:  RETLW  00
004A:  RETLW  48
004B:  RETLW  41
004C:  RETLW  00
004D:  RETLW  00
004E:  RETLW  00
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDWF  02,F
0053:  RETLW  00
0054:  RETLW  01
0055:  RETLW  08
0056:  RETLW  00
0057:  RETLW  00
0058:  RETLW  00
0059:  RETLW  00
005A:  RETLW  41
005B:  RETLW  48
005C:  RETLW  00
005D:  RETLW  00
005E:  RETLW  00
005F:  BCF    0A.0
0060:  BCF    0A.1
0061:  BCF    0A.2
0062:  ADDWF  02,F
0063:  RETLW  01
0064:  RETLW  00
0065:  RETLW  00
0066:  RETLW  08
0067:  RETLW  10
0068:  RETLW  20
0069:  RETLW  41
006A:  RETLW  40
006B:  RETLW  40
006C:  RETLW  48
006D:  RETLW  50
006E:  RETLW  60
006F:  BCF    0A.0
0070:  BCF    0A.1
0071:  BCF    0A.2
0072:  ADDWF  02,F
0073:  RETLW  04
0074:  RETLW  03
0075:  RETLW  03
0076:  RETLW  03
0077:  RETLW  05
0078:  RETLW  05
0079:  RETLW  08
007A:  RETLW  08
007B:  RETLW  04
007C:  RETLW  03
007D:  RETLW  03
007E:  RETLW  03
007F:  RETLW  05
0080:  RETLW  05
0081:  RETLW  08
0082:  RETLW  08
0083:  RETLW  05
0084:  RETLW  0A
0085:  RETLW  0B
0086:  RETLW  0B
0087:  RETLW  0C
0088:  RETLW  0C
0089:  BCF    0A.0
008A:  BCF    0A.1
008B:  BCF    0A.2
008C:  ADDWF  02,F
008D:  RETLW  03
008E:  RETLW  00
008F:  RETLW  02
0090:  RETLW  06
0091:  RETLW  04
0092:  RETLW  02
0093:  RETLW  02
0094:  RETLW  03
0095:  RETLW  02
0096:  RETLW  01
0097:  RETLW  01
0098:  RETLW  04
0099:  RETLW  02
009A:  RETLW  05
009B:  RETLW  00
009C:  RETLW  02
009D:  RETLW  06
009E:  RETLW  04
009F:  RETLW  02
00A0:  RETLW  02
00A1:  RETLW  03
00A2:  RETLW  02
00A3:  RETLW  01
00A4:  RETLW  01
00A5:  RETLW  04
00A6:  RETLW  02
00A7:  RETLW  05
00A8:  RETLW  0A
00A9:  RETLW  0A
00AA:  RETLW  0A
00AB:  RETLW  0B
00AC:  RETLW  0B
00AD:  RETLW  0C
00AE:  RETLW  0C
00AF:  BCF    0A.0
00B0:  BCF    0A.1
00B1:  BCF    0A.2
00B2:  ADDWF  02,F
00B3:  RETLW  03
00B4:  RETLW  00
00B5:  RETLW  02
00B6:  RETLW  06
00B7:  RETLW  02
00B8:  RETLW  05
00B9:  RETLW  02
00BA:  RETLW  02
00BB:  RETLW  07
00BC:  RETLW  05
00BD:  RETLW  02
00BE:  RETLW  03
00BF:  RETLW  02
00C0:  RETLW  06
00C1:  RETLW  00
00C2:  RETLW  02
00C3:  RETLW  05
00C4:  RETLW  02
00C5:  RETLW  02
00C6:  RETLW  07
00C7:  RETLW  05
00C8:  RETLW  02
00C9:  RETLW  01
00CA:  RETLW  0A
00CB:  RETLW  0A
00CC:  RETLW  0A
00CD:  RETLW  0A
00CE:  RETLW  0A
00CF:  RETLW  0B
00D0:  RETLW  0B
00D1:  RETLW  0C
00D2:  RETLW  0C
00D3:  BCF    0A.0
00D4:  BCF    0A.1
00D5:  BCF    0A.2
00D6:  ADDWF  02,F
00D7:  RETLW  02
00D8:  RETLW  01
00D9:  RETLW  01
00DA:  RETLW  01
00DB:  RETLW  09
00DC:  RETLW  05
00DD:  RETLW  03
00DE:  RETLW  03
00DF:  RETLW  02
00E0:  RETLW  04
00E1:  RETLW  08
00E2:  RETLW  01
00E3:  RETLW  01
00E4:  RETLW  01
00E5:  RETLW  09
00E6:  RETLW  05
00E7:  RETLW  03
00E8:  RETLW  03
00E9:  RETLW  02
00EA:  RETLW  04
00EB:  RETLW  08
00EC:  RETLW  0A
00ED:  RETLW  0A
00EE:  RETLW  0A
00EF:  RETLW  0A
00F0:  RETLW  0B
00F1:  RETLW  0B
00F2:  RETLW  0C
00F3:  RETLW  0C
00F4:  BCF    0A.0
00F5:  BCF    0A.1
00F6:  BCF    0A.2
00F7:  ADDLW  FB
00F8:  BTFSC  03.0
00F9:  INCF   0A,F
00FA:  MOVWF  02
00FB:  RETLW  01
00FC:  RETLW  05
00FD:  RETLW  02
00FE:  RETLW  01
00FF:  RETLW  05
0100:  RETLW  02
0101:  RETLW  01
0102:  RETLW  02
0103:  RETLW  01
0104:  RETLW  01
0105:  RETLW  01
0106:  RETLW  01
0107:  RETLW  05
0108:  RETLW  02
0109:  RETLW  01
010A:  RETLW  05
010B:  RETLW  02
010C:  RETLW  01
010D:  RETLW  02
010E:  RETLW  01
010F:  RETLW  01
0110:  RETLW  01
0111:  RETLW  01
0112:  RETLW  08
0113:  RETLW  07
0114:  RETLW  06
0115:  RETLW  04
0116:  RETLW  0A
0117:  RETLW  0A
0118:  RETLW  0A
0119:  RETLW  0A
011A:  RETLW  0B
011B:  RETLW  0B
011C:  RETLW  0B
011D:  RETLW  0C
011E:  RETLW  0C
011F:  BSF    0A.0
0120:  BCF    0A.1
0121:  BCF    0A.2
0122:  ADDWF  02,F
0123:  RETLW  02
0124:  RETLW  03
0125:  RETLW  02
0126:  RETLW  01
0127:  RETLW  01
0128:  RETLW  03
0129:  RETLW  02
012A:  RETLW  01
012B:  RETLW  02
012C:  RETLW  01
012D:  RETLW  01
012E:  RETLW  01
012F:  RETLW  03
0130:  RETLW  03
0131:  RETLW  02
0132:  RETLW  01
0133:  RETLW  01
0134:  RETLW  02
0135:  RETLW  02
0136:  RETLW  01
0137:  RETLW  02
0138:  RETLW  01
0139:  RETLW  01
013A:  RETLW  01
013B:  RETLW  03
013C:  RETLW  08
013D:  RETLW  06
013E:  RETLW  01
013F:  RETLW  06
0140:  RETLW  04
0141:  RETLW  0A
0142:  RETLW  0A
0143:  RETLW  0A
0144:  RETLW  0B
0145:  RETLW  0B
0146:  RETLW  0B
0147:  RETLW  0C
0148:  RETLW  0C
0149:  BSF    0A.0
014A:  BCF    0A.1
014B:  BCF    0A.2
014C:  ADDWF  02,F
014D:  RETLW  03
014E:  RETLW  01
014F:  RETLW  03
0150:  RETLW  01
0151:  RETLW  02
0152:  RETLW  01
0153:  RETLW  03
0154:  RETLW  01
0155:  RETLW  03
0156:  RETLW  01
0157:  RETLW  07
0158:  RETLW  01
0159:  RETLW  03
015A:  RETLW  01
015B:  RETLW  02
015C:  RETLW  01
015D:  RETLW  03
015E:  RETLW  01
015F:  RETLW  03
0160:  RETLW  01
0161:  RETLW  07
0162:  RETLW  01
0163:  RETLW  01
0164:  RETLW  02
0165:  RETLW  05
0166:  RETLW  03
0167:  RETLW  06
0168:  RETLW  04
0169:  RETLW  0A
016A:  RETLW  0A
016B:  RETLW  0B
016C:  RETLW  0B
016D:  RETLW  0B
016E:  RETLW  0C
016F:  RETLW  0C
0170:  BSF    0A.0
0171:  BCF    0A.1
0172:  BCF    0A.2
0173:  ADDWF  02,F
0174:  RETLW  04
0175:  RETLW  05
0176:  RETLW  04
0177:  RETLW  05
0178:  RETLW  03
0179:  RETLW  01
017A:  RETLW  01
017B:  RETLW  07
017C:  RETLW  05
017D:  RETLW  04
017E:  RETLW  05
017F:  RETLW  03
0180:  RETLW  01
0181:  RETLW  01
0182:  RETLW  07
0183:  RETLW  01
0184:  RETLW  01
0185:  RETLW  01
0186:  RETLW  04
0187:  RETLW  05
0188:  RETLW  06
0189:  RETLW  04
018A:  RETLW  0A
018B:  RETLW  0B
018C:  RETLW  0B
018D:  RETLW  0B
018E:  RETLW  0C
018F:  RETLW  0C
0190:  BSF    0A.0
0191:  BCF    0A.1
0192:  BCF    0A.2
0193:  ADDWF  02,F
0194:  RETLW  02
0195:  RETLW  02
0196:  RETLW  02
0197:  RETLW  02
0198:  RETLW  03
0199:  RETLW  03
019A:  RETLW  02
019B:  RETLW  01
019C:  RETLW  01
019D:  RETLW  01
019E:  RETLW  01
019F:  RETLW  03
01A0:  RETLW  01
01A1:  RETLW  04
01A2:  RETLW  06
01A3:  RETLW  02
01A4:  RETLW  02
01A5:  RETLW  05
01A6:  RETLW  02
01A7:  RETLW  02
01A8:  RETLW  02
01A9:  RETLW  02
01AA:  RETLW  04
01AB:  RETLW  02
01AC:  RETLW  05
01AD:  RETLW  02
01AE:  RETLW  01
01AF:  RETLW  01
01B0:  RETLW  01
01B1:  RETLW  01
01B2:  RETLW  01
01B3:  RETLW  0B
01B4:  RETLW  0B
01B5:  RETLW  0B
01B6:  RETLW  0C
01B7:  RETLW  0C
01B8:  BSF    0A.0
01B9:  BCF    0A.1
01BA:  BCF    0A.2
01BB:  ADDWF  02,F
01BC:  RETLW  02
01BD:  RETLW  02
01BE:  RETLW  02
01BF:  RETLW  02
01C0:  RETLW  03
01C1:  RETLW  03
01C2:  RETLW  04
01C3:  RETLW  03
01C4:  RETLW  03
01C5:  RETLW  01
01C6:  RETLW  01
01C7:  RETLW  02
01C8:  RETLW  01
01C9:  RETLW  01
01CA:  RETLW  04
01CB:  RETLW  02
01CC:  RETLW  05
01CD:  RETLW  02
01CE:  RETLW  02
01CF:  RETLW  02
01D0:  RETLW  02
01D1:  RETLW  02
01D2:  RETLW  03
01D3:  RETLW  01
01D4:  RETLW  02
01D5:  RETLW  03
01D6:  RETLW  02
01D7:  RETLW  02
01D8:  RETLW  01
01D9:  RETLW  0A
01DA:  RETLW  0A
01DB:  RETLW  0A
01DC:  RETLW  0A
01DD:  RETLW  0A
01DE:  RETLW  0A
01DF:  RETLW  0B
01E0:  RETLW  0B
01E1:  RETLW  0B
01E2:  RETLW  0C
01E3:  RETLW  0C
01E4:  BSF    0A.0
01E5:  BCF    0A.1
01E6:  BCF    0A.2
01E7:  ADDLW  EB
01E8:  BTFSC  03.0
01E9:  INCF   0A,F
01EA:  MOVWF  02
01EB:  RETLW  02
01EC:  RETLW  02
01ED:  RETLW  02
01EE:  RETLW  02
01EF:  RETLW  03
01F0:  RETLW  06
01F1:  RETLW  03
01F2:  RETLW  01
01F3:  RETLW  01
01F4:  RETLW  01
01F5:  RETLW  02
01F6:  RETLW  01
01F7:  RETLW  01
01F8:  RETLW  03
01F9:  RETLW  01
01FA:  RETLW  02
01FB:  RETLW  05
01FC:  RETLW  02
01FD:  RETLW  02
01FE:  RETLW  02
01FF:  RETLW  02
0200:  RETLW  02
0201:  RETLW  02
0202:  RETLW  02
0203:  RETLW  03
0204:  RETLW  02
0205:  RETLW  01
0206:  RETLW  02
0207:  RETLW  03
0208:  RETLW  01
0209:  RETLW  01
020A:  RETLW  0A
020B:  RETLW  0A
020C:  RETLW  0A
020D:  RETLW  0A
020E:  RETLW  0B
020F:  RETLW  0B
0210:  RETLW  0B
0211:  RETLW  0C
0212:  RETLW  0C
0213:  BCF    0A.0
0214:  BSF    0A.1
0215:  BCF    0A.2
0216:  ADDWF  02,F
0217:  RETLW  02
0218:  RETLW  02
0219:  RETLW  02
021A:  RETLW  02
021B:  RETLW  03
021C:  RETLW  03
021D:  RETLW  02
021E:  RETLW  01
021F:  RETLW  01
0220:  RETLW  03
0221:  RETLW  01
0222:  RETLW  02
0223:  RETLW  01
0224:  RETLW  07
0225:  RETLW  05
0226:  RETLW  02
0227:  RETLW  02
0228:  RETLW  02
0229:  RETLW  02
022A:  RETLW  02
022B:  RETLW  02
022C:  RETLW  02
022D:  RETLW  01
022E:  RETLW  05
022F:  RETLW  02
0230:  RETLW  02
0231:  RETLW  04
0232:  RETLW  01
0233:  RETLW  01
0234:  RETLW  01
0235:  RETLW  0A
0236:  RETLW  0A
0237:  RETLW  0B
0238:  RETLW  0B
0239:  RETLW  0B
023A:  RETLW  0C
023B:  RETLW  0C
023C:  BCF    0A.0
023D:  BSF    0A.1
023E:  BCF    0A.2
023F:  ADDWF  02,F
0240:  RETLW  06
0241:  RETLW  01
0242:  RETLW  07
0243:  RETLW  03
0244:  RETLW  02
0245:  RETLW  03
0246:  RETLW  07
0247:  RETLW  07
0248:  RETLW  05
0249:  RETLW  06
024A:  RETLW  01
024B:  RETLW  07
024C:  RETLW  03
024D:  RETLW  02
024E:  RETLW  03
024F:  RETLW  07
0250:  RETLW  07
0251:  RETLW  05
0252:  RETLW  0A
0253:  RETLW  0A
0254:  RETLW  0B
0255:  RETLW  0B
0256:  RETLW  0C
0257:  RETLW  0C
0258:  BCF    0A.0
0259:  BSF    0A.1
025A:  BCF    0A.2
025B:  ADDWF  02,F
025C:  RETLW  05
025D:  RETLW  01
025E:  RETLW  01
025F:  RETLW  05
0260:  RETLW  03
0261:  RETLW  04
0262:  RETLW  03
0263:  RETLW  03
0264:  RETLW  01
0265:  RETLW  01
0266:  RETLW  01
0267:  RETLW  03
0268:  RETLW  06
0269:  RETLW  05
026A:  RETLW  01
026B:  RETLW  01
026C:  RETLW  05
026D:  RETLW  03
026E:  RETLW  04
026F:  RETLW  03
0270:  RETLW  03
0271:  RETLW  01
0272:  RETLW  01
0273:  RETLW  01
0274:  RETLW  03
0275:  RETLW  06
0276:  RETLW  0A
0277:  RETLW  0A
0278:  RETLW  0B
0279:  RETLW  0B
027A:  RETLW  0C
027B:  RETLW  0C
027C:  BCF    0A.0
027D:  BSF    0A.1
027E:  BCF    0A.2
027F:  ADDWF  02,F
0280:  RETLW  04
0281:  RETLW  05
0282:  RETLW  01
0283:  RETLW  01
0284:  RETLW  03
0285:  RETLW  06
0286:  RETLW  03
0287:  RETLW  01
0288:  RETLW  01
0289:  RETLW  03
028A:  RETLW  01
028B:  RETLW  01
028C:  RETLW  07
028D:  RETLW  04
028E:  RETLW  05
028F:  RETLW  01
0290:  RETLW  01
0291:  RETLW  03
0292:  RETLW  06
0293:  RETLW  03
0294:  RETLW  01
0295:  RETLW  01
0296:  RETLW  03
0297:  RETLW  01
0298:  RETLW  01
0299:  RETLW  07
029A:  RETLW  0A
029B:  RETLW  0A
029C:  RETLW  0B
029D:  RETLW  0B
029E:  RETLW  0C
029F:  RETLW  0C
02A0:  BCF    0A.0
02A1:  BSF    0A.1
02A2:  BCF    0A.2
02A3:  ADDWF  02,F
02A4:  RETLW  03
02A5:  RETLW  07
02A6:  RETLW  01
02A7:  RETLW  03
02A8:  RETLW  08
02A9:  RETLW  03
02AA:  RETLW  09
02AB:  RETLW  08
02AC:  RETLW  03
02AD:  RETLW  07
02AE:  RETLW  01
02AF:  RETLW  03
02B0:  RETLW  08
02B1:  RETLW  03
02B2:  RETLW  09
02B3:  RETLW  08
02B4:  RETLW  0A
02B5:  RETLW  0A
02B6:  RETLW  0B
02B7:  RETLW  0B
02B8:  RETLW  0C
02B9:  RETLW  0C
02BA:  BCF    0A.0
02BB:  BSF    0A.1
02BC:  BCF    0A.2
02BD:  ADDWF  02,F
02BE:  RETLW  3F
02BF:  RETLW  06
02C0:  RETLW  5B
02C1:  RETLW  4F
02C2:  RETLW  66
02C3:  RETLW  6D
02C4:  RETLW  7D
02C5:  RETLW  07
02C6:  RETLW  7F
02C7:  RETLW  6F
02C8:  RETLW  08
02C9:  RETLW  48
02CA:  RETLW  49
*
03F5:  CLRF   77
03F6:  CLRF   78
03F7:  MOVF   52,W
03F8:  BCF    03.0
03F9:  BTFSC  53.0
03FA:  ADDWF  77,F
03FB:  RRF    77,F
03FC:  RRF    78,F
03FD:  BTFSC  53.1
03FE:  ADDWF  77,F
03FF:  RRF    77,F
0400:  RRF    78,F
0401:  BTFSC  53.2
0402:  ADDWF  77,F
0403:  RRF    77,F
0404:  RRF    78,F
0405:  BTFSC  53.3
0406:  ADDWF  77,F
0407:  RRF    77,F
0408:  RRF    78,F
0409:  BTFSC  53.4
040A:  ADDWF  77,F
040B:  RRF    77,F
040C:  RRF    78,F
040D:  BTFSC  53.5
040E:  ADDWF  77,F
040F:  RRF    77,F
0410:  RRF    78,F
0411:  BTFSC  53.6
0412:  ADDWF  77,F
0413:  RRF    77,F
0414:  RRF    78,F
0415:  BTFSC  53.7
0416:  ADDWF  77,F
0417:  RRF    77,F
0418:  RRF    78,F
0419:  RETURN
041A:  CLRF   78
041B:  CLRF   79
041C:  CLRF   77
041D:  CLRF   7A
041E:  MOVF   55,W
041F:  BTFSS  03.2
0420:  GOTO   424
0421:  MOVF   54,W
0422:  BTFSC  03.2
0423:  GOTO   43E
0424:  MOVLW  10
0425:  MOVWF  56
0426:  BCF    03.0
0427:  RLF    52,F
0428:  RLF    53,F
0429:  RLF    77,F
042A:  RLF    7A,F
042B:  MOVF   55,W
042C:  SUBWF  7A,W
042D:  BTFSS  03.2
042E:  GOTO   431
042F:  MOVF   54,W
0430:  SUBWF  77,W
0431:  BTFSS  03.0
0432:  GOTO   43A
0433:  MOVF   54,W
0434:  SUBWF  77,F
0435:  BTFSS  03.0
0436:  DECF   7A,F
0437:  MOVF   55,W
0438:  SUBWF  7A,F
0439:  BSF    03.0
043A:  RLF    78,F
043B:  RLF    79,F
043C:  DECFSZ 56,F
043D:  GOTO   426
043E:  RETURN
*
04DF:  MOVLW  10
04E0:  MOVWF  56
04E1:  CLRF   77
04E2:  CLRF   7A
04E3:  RRF    53,F
04E4:  RRF    52,F
04E5:  BTFSS  03.0
04E6:  GOTO   4ED
04E7:  MOVF   54,W
04E8:  ADDWF  77,F
04E9:  BTFSC  03.0
04EA:  INCF   7A,F
04EB:  MOVF   55,W
04EC:  ADDWF  7A,F
04ED:  RRF    7A,F
04EE:  RRF    77,F
04EF:  RRF    79,F
04F0:  RRF    78,F
04F1:  DECFSZ 56,F
04F2:  GOTO   4E3
04F3:  BCF    0A.3
04F4:  BCF    0A.4
04F5:  GOTO   766 (RETURN)
*
0590:  MOVLW  8E
0591:  MOVWF  77
0592:  MOVF   4F,W
0593:  MOVWF  78
0594:  MOVF   4E,W
0595:  MOVWF  79
0596:  CLRF   7A
0597:  MOVF   78,F
0598:  BTFSS  03.2
0599:  GOTO   5A4
059A:  MOVF   79,W
059B:  MOVWF  78
059C:  CLRF   79
059D:  MOVLW  08
059E:  SUBWF  77,F
059F:  MOVF   78,F
05A0:  BTFSS  03.2
05A1:  GOTO   5A4
05A2:  CLRF   77
05A3:  GOTO   5AC
05A4:  BCF    03.0
05A5:  BTFSC  78.7
05A6:  GOTO   5AB
05A7:  RLF    79,F
05A8:  RLF    78,F
05A9:  DECF   77,F
05AA:  GOTO   5A4
05AB:  BCF    78.7
05AC:  RETURN
05AD:  MOVF   4E,W
05AE:  BTFSC  03.2
05AF:  GOTO   61D
05B0:  MOVWF  56
05B1:  MOVF   52,W
05B2:  BTFSC  03.2
05B3:  GOTO   61D
05B4:  ADDWF  56,F
05B5:  BTFSC  03.0
05B6:  GOTO   5BE
05B7:  MOVLW  7F
05B8:  SUBWF  56,F
05B9:  BTFSS  03.0
05BA:  GOTO   61D
05BB:  BTFSC  03.2
05BC:  GOTO   61D
05BD:  GOTO   5C2
05BE:  MOVLW  81
05BF:  ADDWF  56,F
05C0:  BTFSC  03.0
05C1:  GOTO   61D
05C2:  MOVF   56,W
05C3:  MOVWF  77
05C4:  CLRF   78
05C5:  CLRF   79
05C6:  CLRF   7A
05C7:  MOVF   4F,W
05C8:  MOVWF  5A
05C9:  BSF    5A.7
05CA:  MOVF   50,W
05CB:  MOVWF  59
05CC:  MOVF   51,W
05CD:  MOVWF  58
05CE:  MOVLW  18
05CF:  MOVWF  56
05D0:  CLRF   57
05D1:  BTFSS  58.0
05D2:  GOTO   5EB
05D3:  MOVF   55,W
05D4:  ADDWF  7A,F
05D5:  BTFSS  03.0
05D6:  GOTO   5DD
05D7:  INCF   79,F
05D8:  BTFSS  03.2
05D9:  GOTO   5DD
05DA:  INCF   78,F
05DB:  BTFSC  03.2
05DC:  BSF    57.7
05DD:  MOVF   54,W
05DE:  ADDWF  79,F
05DF:  BTFSS  03.0
05E0:  GOTO   5E4
05E1:  INCF   78,F
05E2:  BTFSC  03.2
05E3:  BSF    57.7
05E4:  MOVF   53,W
05E5:  MOVWF  50
05E6:  BSF    50.7
05E7:  MOVF   50,W
05E8:  ADDWF  78,F
05E9:  BTFSC  03.0
05EA:  BSF    57.7
05EB:  RLF    57,F
05EC:  RRF    78,F
05ED:  RRF    79,F
05EE:  RRF    7A,F
05EF:  RRF    5A,F
05F0:  RRF    59,F
05F1:  RRF    58,F
05F2:  BCF    03.0
05F3:  DECFSZ 56,F
05F4:  GOTO   5D0
05F5:  MOVLW  01
05F6:  ADDWF  77,F
05F7:  BTFSC  03.0
05F8:  GOTO   61D
05F9:  BTFSC  78.7
05FA:  GOTO   602
05FB:  RLF    5A,F
05FC:  RLF    7A,F
05FD:  RLF    79,F
05FE:  RLF    78,F
05FF:  DECF   77,F
0600:  BTFSC  03.2
0601:  GOTO   61D
0602:  BTFSS  5A.7
0603:  GOTO   613
0604:  INCF   7A,F
0605:  BTFSS  03.2
0606:  GOTO   613
0607:  INCF   79,F
0608:  BTFSS  03.2
0609:  GOTO   613
060A:  INCF   78,F
060B:  BTFSS  03.2
060C:  GOTO   613
060D:  RRF    78,F
060E:  RRF    79,F
060F:  RRF    7A,F
0610:  INCF   77,F
0611:  BTFSC  03.2
0612:  GOTO   61D
0613:  MOVF   4F,W
0614:  MOVWF  57
0615:  MOVF   53,W
0616:  XORWF  57,F
0617:  BTFSS  57.7
0618:  GOTO   61B
0619:  BSF    78.7
061A:  GOTO   621
061B:  BCF    78.7
061C:  GOTO   621
061D:  CLRF   77
061E:  CLRF   78
061F:  CLRF   79
0620:  CLRF   7A
0621:  RETURN
0622:  MOVLW  8E
0623:  MOVWF  77
0624:  MOVF   4E,W
0625:  SUBWF  77,F
0626:  MOVF   4F,W
0627:  MOVWF  79
0628:  MOVF   50,W
0629:  MOVWF  78
062A:  BSF    79.7
062B:  MOVF   77,F
062C:  BTFSC  03.2
062D:  GOTO   639
062E:  BCF    03.0
062F:  MOVF   79,F
0630:  BTFSS  03.2
0631:  GOTO   635
0632:  MOVF   78,F
0633:  BTFSC  03.2
0634:  GOTO   639
0635:  RRF    79,F
0636:  RRF    78,F
0637:  DECFSZ 77,F
0638:  GOTO   62E
0639:  BTFSS  4F.7
063A:  GOTO   640
063B:  COMF   78,F
063C:  COMF   79,F
063D:  INCF   78,F
063E:  BTFSC  03.2
063F:  INCF   79,F
0640:  RETURN
*
06B1:  MOVF   4F,W
06B2:  ANDLW  07
06B3:  MOVWF  77
06B4:  RRF    4F,W
06B5:  MOVWF  78
06B6:  RRF    78,F
06B7:  RRF    78,F
06B8:  MOVLW  1F
06B9:  ANDWF  78,F
06BA:  MOVF   78,W
06BB:  ADDWF  51,W
06BC:  MOVWF  04
06BD:  BCF    03.7
06BE:  BTFSC  52.0
06BF:  BSF    03.7
06C0:  CLRF   78
06C1:  INCF   78,F
06C2:  INCF   77,F
06C3:  GOTO   6C5
06C4:  RLF    78,F
06C5:  DECFSZ 77,F
06C6:  GOTO   6C4
06C7:  MOVF   50,F
06C8:  BTFSC  03.2
06C9:  GOTO   6CD
06CA:  MOVF   78,W
06CB:  IORWF  00,F
06CC:  GOTO   6D0
06CD:  COMF   78,F
06CE:  MOVF   78,W
06CF:  ANDWF  00,F
06D0:  BCF    0A.3
06D1:  BCF    0A.4
06D2:  GOTO   78C (RETURN)
*
0A20:  BCF    0A.0
0A21:  BSF    0A.1
0A22:  BCF    0A.2
0A23:  ADDWF  02,F
0A24:  GOTO   007
0A25:  GOTO   07B
0A26:  GOTO   160
0A27:  GOTO   1E6
....................  
.................... #list 
....................  
....................  
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES WRT_1000                 //Program Memory Write Protected from 0 to 0x0FFF 
.................... #FUSES NOPROTECT                //Code not protected from reading 
....................  
.................... #use FIXED_IO(D_outputs=PIN_D7,PIN_D6,PIN_D5,PIN_D4,PIN_D3,PIN_D2,PIN_D1,PIN_D0) 
.................... #use FIXED_IO(A_outputs=PIN_A5) 
....................  
.................... #use delay(crystal=4MHz) 
....................  
.................... #define S1   PIN_B0 
.................... #define S2   PIN_B1 
.................... #define S3   PIN_B2 
.................... #define S4   PIN_B3 
....................  
.................... #define DU   PIN_B4 
.................... #define DD   PIN_B5 
.................... #define DC   PIN_B6 
.................... #define DM   PIN_B7 
....................  
.................... #define BUZZER   PIN_A5 
....................  
....................  
.................... #define V_CONTADOR_DECREMENTO 200 
....................  
.................... int16 intervalo_incremento = 1000; 
.................... int16 contador_fase = 0; 
.................... int8 unidade, dezena, centena, milhar; 
....................  
.................... int8 fase = 0; 
.................... int8 tempo_inicio; 
.................... int16 velocidade; 
.................... int1 unidade_ativo = 0, dezena_ativo = 0, centena_ativo = 0, milhar_ativo = 0; 
.................... int1 unidade_ativode = 0, dezena_ativode = 0, centena_ativode = 0, milhar_ativode = 0; 
.................... int1 comeca = 0; 
....................  
.................... int8 unidade_atual, dezena_atual, centena_atual, milhar_atual; 
.................... int8 contador_u = 0, contador_d = 0, contador_c = 0, contador_m = 0; 
.................... int8 decremento_u = 0, decremento_d = 0, decremento_c = 0, decremento_m = 0; 
....................  
.................... int1 pausa_fase_1 = 0, pausa_fase_2 = 0, pausa_fase_3 = 0; 
....................  
.................... int16 unidade_ativodecont, dezena_ativodecont, centena_ativodecont, milhar_ativodecont; 
....................  
.................... int8 contador_tela_inicial = 0; 
.................... int8 finalfase = 100; 
.................... int1 alternar_tela_inicial = 0; 
....................  
.................... const int8 listadisplay4[] = {0x08,0x00,0x00,0x01,0x02,0x04,0b01001000,0b01000000,0b01000000,0b01000001,0b01000010,0b01000100}; 
.................... const int8 listadisplay3[] = {0x00,0x08,0x01,0x00,0x00,0x00,0x00,0b01001000,0b01000001,0x00,0x00,0x00}; 
.................... const int8 listadisplay2[] = {0x00,0x01,0x08,0x00,0x00,0x00,0x00,0b01000001,0b01001000,0x00,0x00,0x00}; 
.................... const int8 listadisplay1[] = {0x01,0x00,0x00,0x08,0x10,0x20,0b01000001,0b01000000,0b01000000,0b01001000,0b01010000,0b01100000}; 
....................  
.................... const int8 u1 [] = {4, 3, 3, 3, 5, 5, 8, 8, 4, 3, 3, 3, 5, 5, 8, 8, 5, 10, 11, 11, 12, 12}; 
.................... const int8 d1 [] = {3,0 , 2, 6, 4, 2, 2, 3, 2, 1, 1, 4, 2, 5,0, 2, 6, 4, 2, 2, 3, 2, 1, 1, 4, 2, 5, 10, 10, 10, 11, 11, 12, 12}; 
.................... const int8 c1 [] = {3,0 , 2, 6, 2, 5, 2, 2, 7, 5, 2, 3, 2, 6,0, 2, 5, 2, 2, 7, 5, 2, 1, 10, 10, 10, 10, 10, 11, 11, 12, 12}; 
.................... const int8 m1 [] = {2, 1, 1, 1, 9, 5, 3, 3, 2, 4, 8, 1, 1, 1, 9, 5, 3, 3, 2, 4, 8, 10, 10, 10, 10, 11, 11, 12, 12}; 
....................  
.................... const int8 u2[] = {1, 5, 2, 1, 5, 2, 1, 2, 1, 1, 1,1, 5, 2, 1, 5, 2, 1, 2, 1, 1, 1, 1, 8, 7,6,4, 10, 10, 10, 10, 11, 11, 11, 12, 12}; 
.................... const int8 d2[] = {2, 3, 2, 1, 1, 3, 2, 1, 2, 1, 1, 1, 3, 3, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 3,8, 6, 1,6,4, 10, 10, 10, 11, 11, 11, 12, 12}; 
.................... const int8 c2[] = {3, 1, 3, 1, 2, 1, 3, 1, 3, 1, 7,1, 3, 1, 2, 1, 3, 1, 3, 1, 7, 1, 1, 2, 5, 3,6,4, 10, 10, 11, 11, 11, 12, 12}; 
.................... const int8 m2[] = {4, 5, 4, 5, 3, 1, 1, 7, 5, 4, 5, 3, 1, 1, 7, 1, 1, 1, 4, 5,6,4, 10, 11, 11, 11, 12, 12}; 
....................  
.................... const int8 u3[] = {2, 2, 2, 2, 3, 3, 2, 1, 1, 1, 1, 3, 1, 4, 6, 2, 2, 5, 2, 2, 2, 2, 4, 2, 5, 2, 1, 1, 1, 1, 1, 11, 11, 11, 12, 12}; 
.................... const int8 d3[] = {2, 2, 2, 2, 3, 3, 4, 3, 3, 1, 1, 2, 1, 1, 4, 2, 5, 2, 2, 2, 2, 2, 3, 1, 2, 3, 2, 2, 1, 10, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12}; 
.................... const int8 c3[] = {2, 2, 2, 2, 3, 6, 3, 1, 1, 1, 2, 1, 1, 3, 1, 2, 5, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, 2, 3, 1, 1, 10, 10, 10, 10, 11, 11, 11, 12, 12}; 
.................... const int8 m3[] = {2, 2, 2, 2, 3, 3, 2, 1, 1, 3, 1, 2, 1, 7, 5, 2, 2, 2, 2, 2, 2, 2, 1, 5, 2, 2, 4, 1, 1, 1, 10, 10, 11, 11, 11, 12, 12}; 
....................  
.................... const int8 u4[] = {6, 1, 7, 3, 2, 3, 7, 7, 5,6, 1, 7, 3, 2, 3, 7, 7, 5, 10, 10, 11, 11, 12, 12}; 
.................... const int8 d4[] = {5, 1, 1, 5, 3, 4, 3, 3, 1, 1, 1, 3, 6,5, 1, 1, 5, 3, 4, 3, 3, 1, 1, 1, 3, 6, 10, 10, 11, 11, 12, 12}; 
.................... const int8 c4[] = {4, 5, 1, 1, 3, 6, 3, 1, 1, 3, 1, 1, 7,4, 5, 1, 1, 3, 6, 3, 1, 1, 3, 1, 1, 7, 10, 10, 11, 11, 12, 12}; 
.................... const int8 m4[] = {3, 7, 1, 3, 8, 3, 9, 8, 3, 7, 1, 3, 8, 3, 9, 8,10, 10, 11, 11, 12, 12}; 
....................  
.................... const int8 display_numbers[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0b00001000, 0b01001000, 0b01001001}; 
....................  
.................... int1 passou_fase[] = {0, 0, 0, 0}; 
*
06FF:  BCF    03.5
0700:  CLRF   4B
....................  
.................... int16 contador_ms = 0; 
....................  
.................... void verificar_erro_zero(); 
.................... void verificar_erro_nove(); 
....................  
.................... void mostrar_tela_inicial(); 
....................  
.................... void escolha_de_fase(); 
....................  
.................... void fase1(); 
.................... void fase4(); 
.................... void fase3(); 
.................... void fase2(); 
....................  
.................... void mostrar_falha(); 
....................  
.................... void delay(int8 n); 
.................... void verificar_botoes(); 
.................... void atualiza_display(); 
....................  
.................... void atualizar_unidade(); 
.................... void atualizar_dezena(); 
.................... void atualizar_centena(); 
.................... void atualizar_milhar(); 
.................... void testar_listas(); 
....................  
.................... void atualiza_valores(); 
....................  
.................... void executar_fase(); 
....................  
.................... #INT_TIMER0 
.................... void TIMER0_isr(void) { 
....................    set_timer0(get_timer0() + 131); 
*
02CB:  MOVF   01,W
02CC:  ADDLW  83
02CD:  MOVWF  5B
02CE:  MOVF   5B,W
02CF:  MOVWF  01
....................  
....................    contador_ms++; 
02D0:  INCF   4C,F
02D1:  BTFSC  03.2
02D2:  INCF   4D,F
....................  
....................    if (contador_ms >= intervalo_incremento) { // Se atingir o intervalo de 1 segundo 
02D3:  MOVF   28,W
02D4:  SUBWF  4D,W
02D5:  BTFSS  03.0
02D6:  GOTO   3F1
02D7:  BTFSS  03.2
02D8:  GOTO   2DD
02D9:  MOVF   27,W
02DA:  SUBWF  4C,W
02DB:  BTFSS  03.0
02DC:  GOTO   3F1
....................       contador_ms = 0; 
02DD:  CLRF   4D
02DE:  CLRF   4C
....................  
....................       pausa_fase_3 = 0; 
02DF:  BCF    34.3
....................  
....................       contador_tela_inicial++; 
02E0:  INCF   49,F
....................  
....................       if (tempo_inicio) { 
02E1:  MOVF   30,F
02E2:  BTFSC  03.2
02E3:  GOTO   2ED
....................          tempo_inicio--; 
02E4:  DECF   30,F
....................          decremento_u = 0; 
02E5:  CLRF   3D
....................          contador_u = 0; 
02E6:  CLRF   39
....................          decremento_d = 0; 
02E7:  CLRF   3E
....................          contador_d = 0; 
02E8:  CLRF   3A
....................          decremento_c = 0; 
02E9:  CLRF   3F
....................          contador_c = 0; 
02EA:  CLRF   3B
....................          decremento_m = 0; 
02EB:  CLRF   40
....................          contador_m = 0; 
02EC:  CLRF   3C
....................       } 
....................  
....................       if (fase && comeca) { 
02ED:  MOVF   2F,F
02EE:  BTFSC  03.2
02EF:  GOTO   321
02F0:  BTFSS  34.0
02F1:  GOTO   321
....................          contador_fase++; 
02F2:  INCF   29,F
02F3:  BTFSC  03.2
02F4:  INCF   2A,F
....................          verificar_erro_nove(); 
....................          verificar_erro_zero(); 
....................          unidade_ativo = 0; 
*
031D:  BCF    33.0
....................          dezena_ativo = 0; 
031E:  BCF    33.1
....................          centena_ativo = 0; 
031F:  BCF    33.2
....................          milhar_ativo = 0; 
0320:  BCF    33.3
....................       } 
....................  
....................       if (contador_tela_inicial > 5) { // Se o contador_fase atingir 0, reseta para 9999 
0321:  MOVF   49,W
0322:  SUBLW  05
0323:  BTFSS  03.0
....................          contador_tela_inicial = 0; 
0324:  CLRF   49
....................       } 
....................       testar_listas(); 
....................  
....................    } 
*
03F1:  BCF    0B.2
03F2:  BCF    0A.3
03F3:  BCF    0A.4
03F4:  GOTO   01B
.................... } 
....................  
.................... void main() { 
*
06D3:  MOVF   03,W
06D4:  ANDLW  1F
06D5:  MOVWF  03
06D6:  MOVLW  03
06D7:  MOVWF  28
06D8:  MOVLW  E8
06D9:  MOVWF  27
06DA:  CLRF   2A
06DB:  CLRF   29
06DC:  CLRF   2F
06DD:  BCF    33.0
06DE:  BCF    33.1
06DF:  BCF    33.2
06E0:  BCF    33.3
06E1:  BCF    33.4
06E2:  BCF    33.5
06E3:  BCF    33.6
06E4:  BCF    33.7
06E5:  BCF    34.0
06E6:  CLRF   39
06E7:  CLRF   3A
06E8:  CLRF   3B
06E9:  CLRF   3C
06EA:  CLRF   3D
06EB:  CLRF   3E
06EC:  CLRF   3F
06ED:  CLRF   40
06EE:  BCF    34.1
06EF:  BCF    34.2
06F0:  BCF    34.3
06F1:  CLRF   49
06F2:  MOVLW  64
06F3:  MOVWF  4A
06F4:  BCF    34.4
06F5:  CLRF   4D
06F6:  CLRF   4C
06F7:  BSF    03.5
06F8:  BSF    1F.0
06F9:  BSF    1F.1
06FA:  BSF    1F.2
06FB:  BCF    1F.3
06FC:  MOVLW  07
06FD:  MOVWF  1C
06FE:  BCF    03.7
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_8 | RTCC_8_BIT); // 1ms overflow 
0701:  BSF    03.5
0702:  MOVF   01,W
0703:  ANDLW  C0
0704:  IORLW  02
0705:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
0706:  BCF    03.5
0707:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
0708:  MOVLW  C0
0709:  IORWF  0B,F
....................  
....................    output_d(0); 
070A:  BSF    03.5
070B:  CLRF   08
070C:  BCF    03.5
070D:  CLRF   08
....................  
....................    fase = 0; 
070E:  CLRF   2F
....................    unidade_ativodecont = V_CONTADOR_DECREMENTO; 
070F:  CLRF   42
0710:  MOVLW  C8
0711:  MOVWF  41
....................    dezena_ativodecont = V_CONTADOR_DECREMENTO; 
0712:  CLRF   44
0713:  MOVWF  43
....................    centena_ativodecont = V_CONTADOR_DECREMENTO; 
0714:  CLRF   46
0715:  MOVWF  45
....................    milhar_ativodecont = V_CONTADOR_DECREMENTO; 
0716:  CLRF   48
0717:  MOVWF  47
....................  
....................    while (TRUE) { 
....................  
....................       if (!fase) { 
0718:  MOVF   2F,F
0719:  BTFSS  03.2
071A:  GOTO   792
....................          intervalo_incremento = intervalo_incremento / (3 * (passou_fase[0] + passou_fase[1] + passou_fase[2] + passou_fase[3]) + 5); 
071B:  MOVLW  00
071C:  BTFSC  4B.0
071D:  MOVLW  01
071E:  MOVWF  4F
071F:  MOVLW  00
0720:  BTFSC  4B.1
0721:  MOVLW  01
0722:  ADDWF  4F,W
0723:  MOVWF  50
0724:  MOVLW  00
0725:  BTFSC  4B.2
0726:  MOVLW  01
0727:  ADDWF  50,W
0728:  MOVWF  51
0729:  MOVLW  00
072A:  BTFSC  4B.3
072B:  MOVLW  01
072C:  ADDWF  51,W
072D:  MOVWF  4E
072E:  MOVLW  03
072F:  MOVWF  52
0730:  MOVF   4E,W
0731:  MOVWF  53
0732:  CALL   3F5
0733:  MOVLW  05
0734:  ADDWF  78,W
0735:  MOVWF  4E
0736:  MOVF   28,W
0737:  MOVWF  53
0738:  MOVF   27,W
0739:  MOVWF  52
073A:  CLRF   55
073B:  MOVF   4E,W
073C:  MOVWF  54
073D:  CALL   41A
073E:  MOVF   79,W
073F:  MOVWF  28
0740:  MOVF   78,W
0741:  MOVWF  27
....................          mostrar_tela_inicial(); 
0742:  GOTO   447
....................          intervalo_incremento = intervalo_incremento * (3 * (passou_fase[0] + passou_fase[1] + passou_fase[2] + passou_fase[3]) + 5); 
0743:  MOVLW  00
0744:  BTFSC  4B.0
0745:  MOVLW  01
0746:  MOVWF  4F
0747:  MOVLW  00
0748:  BTFSC  4B.1
0749:  MOVLW  01
074A:  ADDWF  4F,W
074B:  MOVWF  50
074C:  MOVLW  00
074D:  BTFSC  4B.2
074E:  MOVLW  01
074F:  ADDWF  50,W
0750:  MOVWF  51
0751:  MOVLW  00
0752:  BTFSC  4B.3
0753:  MOVLW  01
0754:  ADDWF  51,W
0755:  MOVWF  4E
0756:  MOVLW  03
0757:  MOVWF  52
0758:  MOVF   4E,W
0759:  MOVWF  53
075A:  CALL   3F5
075B:  MOVLW  05
075C:  ADDWF  78,W
075D:  MOVWF  4E
075E:  MOVF   28,W
075F:  MOVWF  53
0760:  MOVF   27,W
0761:  MOVWF  52
0762:  CLRF   55
0763:  MOVF   4E,W
0764:  MOVWF  54
0765:  GOTO   4DF
0766:  MOVF   79,W
0767:  MOVWF  28
0768:  MOVF   78,W
0769:  MOVWF  27
....................          escolha_de_fase(); 
076A:  GOTO   543
....................  
....................          executar_fase(); 
076B:  BSF    0A.3
076C:  GOTO   000
076D:  BCF    0A.3
....................                  
....................          if (contador_fase < finalfase) { 
076E:  MOVF   2A,F
076F:  BTFSS  03.2
0770:  GOTO   778
0771:  MOVF   4A,W
0772:  SUBWF  29,W
0773:  BTFSC  03.0
0774:  GOTO   778
....................             mostrar_falha(); 
0775:  GOTO   641
....................             contador_fase = 0; 
0776:  CLRF   2A
0777:  CLRF   29
....................          } 
....................  
....................          passou_fase[fase] = contador_fase >= (finalfase + 4); 
0778:  MOVLW  04
0779:  ADDWF  4A,W
077A:  MOVF   2A,F
077B:  BTFSS  03.2
077C:  GOTO   782
077D:  SUBWF  29,W
077E:  BTFSC  03.0
077F:  GOTO   782
0780:  MOVLW  00
0781:  GOTO   783
0782:  MOVLW  01
0783:  MOVWF  4E
0784:  MOVF   2F,W
0785:  MOVWF  4F
0786:  MOVF   4E,W
0787:  MOVWF  50
0788:  CLRF   52
0789:  MOVLW  4B
078A:  MOVWF  51
078B:  GOTO   6B1
....................           
....................          intervalo_incremento = velocidade; 
078C:  MOVF   32,W
078D:  MOVWF  28
078E:  MOVF   31,W
078F:  MOVWF  27
....................          comeca = 0; 
0790:  BCF    34.0
....................          fase = 0; 
0791:  CLRF   2F
....................       } 
....................       contador_fase = 0; 
0792:  CLRF   2A
0793:  CLRF   29
0794:  GOTO   718
....................    } 
.................... } 
....................  
0795:  SLEEP
.................... void executar_fase() { 
....................    switch (fase) { 
*
0800:  MOVLW  01
0801:  SUBWF  2F,W
0802:  ADDLW  FC
0803:  BTFSC  03.0
0804:  GOTO   21D
0805:  ADDLW  04
0806:  GOTO   220
....................       case 1: 
....................          while (fase) 
0807:  MOVF   2F,F
0808:  BTFSC  03.2
0809:  GOTO   07A
....................             fase1(); 
*
0879:  GOTO   007
....................          break; 
087A:  GOTO   21D
....................       case 2: 
....................          while (fase) 
087B:  MOVF   2F,F
087C:  BTFSC  03.2
087D:  GOTO   15F
....................             fase2(); 
*
095E:  GOTO   07B
....................          break;    
095F:  GOTO   21D
....................       case 3: 
....................          while (fase) 
0960:  MOVF   2F,F
0961:  BTFSC  03.2
0962:  GOTO   1E5
....................             fase3();   
*
09E4:  GOTO   160
....................          break;    
09E5:  GOTO   21D
....................       case 4: 
....................          intervalo_incremento = intervalo_incremento * 0.60; 
09E6:  MOVF   28,W
09E7:  MOVWF  4F
09E8:  MOVF   27,W
09E9:  MOVWF  4E
09EA:  BCF    0A.3
09EB:  CALL   590
09EC:  BSF    0A.3
09ED:  MOVF   7A,W
09EE:  MOVWF  51
09EF:  MOVF   79,W
09F0:  MOVWF  50
09F1:  MOVF   78,W
09F2:  MOVWF  4F
09F3:  MOVF   77,W
09F4:  MOVWF  4E
09F5:  MOVLW  9A
09F6:  MOVWF  55
09F7:  MOVLW  99
09F8:  MOVWF  54
09F9:  MOVLW  19
09FA:  MOVWF  53
09FB:  MOVLW  7E
09FC:  MOVWF  52
09FD:  BCF    0A.3
09FE:  CALL   5AD
09FF:  BSF    0A.3
0A00:  MOVF   7A,W
0A01:  MOVWF  51
0A02:  MOVF   79,W
0A03:  MOVWF  50
0A04:  MOVF   78,W
0A05:  MOVWF  4F
0A06:  MOVF   77,W
0A07:  MOVWF  4E
0A08:  BCF    0A.3
0A09:  CALL   622
0A0A:  BSF    0A.3
0A0B:  MOVF   79,W
0A0C:  MOVWF  28
0A0D:  MOVF   78,W
0A0E:  MOVWF  27
....................          while (fase) 
0A0F:  MOVF   2F,F
0A10:  BTFSC  03.2
0A11:  GOTO   21C
....................             fase4(); 
*
0A1B:  GOTO   20F
....................          break; 
0A1C:  GOTO   21D
....................    } 
0A1D:  BCF    0A.3
0A1E:  BCF    0A.4
0A1F:  GOTO   76D (RETURN)
.................... } 
....................  
.................... void fase1() { 
....................  
....................    if (contador_fase == 50 && !pausa_fase_1) { 
*
080A:  MOVF   29,W
080B:  SUBLW  32
080C:  BTFSS  03.2
080D:  GOTO   03D
080E:  MOVF   2A,F
080F:  BTFSS  03.2
0810:  GOTO   03D
0811:  BTFSC  34.1
0812:  GOTO   03D
....................       intervalo_incremento = intervalo_incremento * 0.85; 
0813:  MOVF   28,W
0814:  MOVWF  4F
0815:  MOVF   27,W
0816:  MOVWF  4E
0817:  BCF    0A.3
0818:  CALL   590
0819:  BSF    0A.3
081A:  MOVF   7A,W
081B:  MOVWF  51
081C:  MOVF   79,W
081D:  MOVWF  50
081E:  MOVF   78,W
081F:  MOVWF  4F
0820:  MOVF   77,W
0821:  MOVWF  4E
0822:  MOVLW  9A
0823:  MOVWF  55
0824:  MOVLW  99
0825:  MOVWF  54
0826:  MOVLW  59
0827:  MOVWF  53
0828:  MOVLW  7E
0829:  MOVWF  52
082A:  BCF    0A.3
082B:  CALL   5AD
082C:  BSF    0A.3
082D:  MOVF   7A,W
082E:  MOVWF  51
082F:  MOVF   79,W
0830:  MOVWF  50
0831:  MOVF   78,W
0832:  MOVWF  4F
0833:  MOVF   77,W
0834:  MOVWF  4E
0835:  BCF    0A.3
0836:  CALL   622
0837:  BSF    0A.3
0838:  MOVF   79,W
0839:  MOVWF  28
083A:  MOVF   78,W
083B:  MOVWF  27
....................       pausa_fase_1 = 1; 
083C:  BSF    34.1
....................    } 
....................  
....................    if (contador_fase == 75 && !pausa_fase_2) { 
083D:  MOVF   29,W
083E:  SUBLW  4B
083F:  BTFSS  03.2
0840:  GOTO   070
0841:  MOVF   2A,F
0842:  BTFSS  03.2
0843:  GOTO   070
0844:  BTFSC  34.2
0845:  GOTO   070
....................       intervalo_incremento = intervalo_incremento * 0.85; 
0846:  MOVF   28,W
0847:  MOVWF  4F
0848:  MOVF   27,W
0849:  MOVWF  4E
084A:  BCF    0A.3
084B:  CALL   590
084C:  BSF    0A.3
084D:  MOVF   7A,W
084E:  MOVWF  51
084F:  MOVF   79,W
0850:  MOVWF  50
0851:  MOVF   78,W
0852:  MOVWF  4F
0853:  MOVF   77,W
0854:  MOVWF  4E
0855:  MOVLW  9A
0856:  MOVWF  55
0857:  MOVLW  99
0858:  MOVWF  54
0859:  MOVLW  59
085A:  MOVWF  53
085B:  MOVLW  7E
085C:  MOVWF  52
085D:  BCF    0A.3
085E:  CALL   5AD
085F:  BSF    0A.3
0860:  MOVF   7A,W
0861:  MOVWF  51
0862:  MOVF   79,W
0863:  MOVWF  50
0864:  MOVF   78,W
0865:  MOVWF  4F
0866:  MOVF   77,W
0867:  MOVWF  4E
0868:  BCF    0A.3
0869:  CALL   622
086A:  BSF    0A.3
086B:  MOVF   79,W
086C:  MOVWF  28
086D:  MOVF   78,W
086E:  MOVWF  27
....................       pausa_fase_2 = 1; 
086F:  BSF    34.2
....................    } 
....................  
....................    if (contador_fase == finalfase + 5) 
0870:  MOVLW  05
0871:  ADDWF  4A,W
0872:  SUBWF  29,W
0873:  BTFSS  03.2
0874:  GOTO   079
0875:  MOVF   2A,F
0876:  BTFSS  03.2
0877:  GOTO   079
....................       fase = 0; 
0878:  CLRF   2F
....................  
.................... } 
....................  
.................... void fase2() { 
....................    if (contador_fase == 12 && !pausa_fase_1) { 
*
087E:  MOVF   29,W
087F:  SUBLW  0C
0880:  BTFSS  03.2
0881:  GOTO   0AF
0882:  MOVF   2A,F
0883:  BTFSS  03.2
0884:  GOTO   0AF
0885:  BTFSC  34.1
0886:  GOTO   0AF
....................       intervalo_incremento = intervalo_incremento * 0.90; 
0887:  MOVF   28,W
0888:  MOVWF  4F
0889:  MOVF   27,W
088A:  MOVWF  4E
088B:  BCF    0A.3
088C:  CALL   590
088D:  BSF    0A.3
088E:  MOVF   7A,W
088F:  MOVWF  51
0890:  MOVF   79,W
0891:  MOVWF  50
0892:  MOVF   78,W
0893:  MOVWF  4F
0894:  MOVF   77,W
0895:  MOVWF  4E
0896:  MOVLW  66
0897:  MOVWF  55
0898:  MOVWF  54
0899:  MOVWF  53
089A:  MOVLW  7E
089B:  MOVWF  52
089C:  BCF    0A.3
089D:  CALL   5AD
089E:  BSF    0A.3
089F:  MOVF   7A,W
08A0:  MOVWF  51
08A1:  MOVF   79,W
08A2:  MOVWF  50
08A3:  MOVF   78,W
08A4:  MOVWF  4F
08A5:  MOVF   77,W
08A6:  MOVWF  4E
08A7:  BCF    0A.3
08A8:  CALL   622
08A9:  BSF    0A.3
08AA:  MOVF   79,W
08AB:  MOVWF  28
08AC:  MOVF   78,W
08AD:  MOVWF  27
....................       pausa_fase_1 = 1; 
08AE:  BSF    34.1
....................    } 
....................  
....................    if (contador_fase == 24 && !pausa_fase_2) { 
08AF:  MOVF   29,W
08B0:  SUBLW  18
08B1:  BTFSS  03.2
08B2:  GOTO   0BE
08B3:  MOVF   2A,F
08B4:  BTFSS  03.2
08B5:  GOTO   0BE
08B6:  BTFSC  34.2
08B7:  GOTO   0BE
....................       intervalo_incremento = velocidade; 
08B8:  MOVF   32,W
08B9:  MOVWF  28
08BA:  MOVF   31,W
08BB:  MOVWF  27
....................       pausa_fase_2 = 1; 
08BC:  BSF    34.2
....................       pausa_fase_1 = 0; 
08BD:  BCF    34.1
....................    } 
....................  
....................    if (contador_fase == 48 && !pausa_fase_1) { 
08BE:  MOVF   29,W
08BF:  SUBLW  30
08C0:  BTFSS  03.2
08C1:  GOTO   0F2
08C2:  MOVF   2A,F
08C3:  BTFSS  03.2
08C4:  GOTO   0F2
08C5:  BTFSC  34.1
08C6:  GOTO   0F2
....................       intervalo_incremento = intervalo_incremento * 0.80; 
08C7:  MOVF   28,W
08C8:  MOVWF  4F
08C9:  MOVF   27,W
08CA:  MOVWF  4E
08CB:  BCF    0A.3
08CC:  CALL   590
08CD:  BSF    0A.3
08CE:  MOVF   7A,W
08CF:  MOVWF  51
08D0:  MOVF   79,W
08D1:  MOVWF  50
08D2:  MOVF   78,W
08D3:  MOVWF  4F
08D4:  MOVF   77,W
08D5:  MOVWF  4E
08D6:  MOVLW  CD
08D7:  MOVWF  55
08D8:  MOVLW  CC
08D9:  MOVWF  54
08DA:  MOVLW  4C
08DB:  MOVWF  53
08DC:  MOVLW  7E
08DD:  MOVWF  52
08DE:  BCF    0A.3
08DF:  CALL   5AD
08E0:  BSF    0A.3
08E1:  MOVF   7A,W
08E2:  MOVWF  51
08E3:  MOVF   79,W
08E4:  MOVWF  50
08E5:  MOVF   78,W
08E6:  MOVWF  4F
08E7:  MOVF   77,W
08E8:  MOVWF  4E
08E9:  BCF    0A.3
08EA:  CALL   622
08EB:  BSF    0A.3
08EC:  MOVF   79,W
08ED:  MOVWF  28
08EE:  MOVF   78,W
08EF:  MOVWF  27
....................       pausa_fase_2 = 0; 
08F0:  BCF    34.2
....................       pausa_fase_1 = 1; 
08F1:  BSF    34.1
....................    } 
....................  
....................    if (contador_fase == 72 && !pausa_fase_2) { 
08F2:  MOVF   29,W
08F3:  SUBLW  48
08F4:  BTFSS  03.2
08F5:  GOTO   124
08F6:  MOVF   2A,F
08F7:  BTFSS  03.2
08F8:  GOTO   124
08F9:  BTFSC  34.2
08FA:  GOTO   124
....................       intervalo_incremento = intervalo_incremento * 0.90; 
08FB:  MOVF   28,W
08FC:  MOVWF  4F
08FD:  MOVF   27,W
08FE:  MOVWF  4E
08FF:  BCF    0A.3
0900:  CALL   590
0901:  BSF    0A.3
0902:  MOVF   7A,W
0903:  MOVWF  51
0904:  MOVF   79,W
0905:  MOVWF  50
0906:  MOVF   78,W
0907:  MOVWF  4F
0908:  MOVF   77,W
0909:  MOVWF  4E
090A:  MOVLW  66
090B:  MOVWF  55
090C:  MOVWF  54
090D:  MOVWF  53
090E:  MOVLW  7E
090F:  MOVWF  52
0910:  BCF    0A.3
0911:  CALL   5AD
0912:  BSF    0A.3
0913:  MOVF   7A,W
0914:  MOVWF  51
0915:  MOVF   79,W
0916:  MOVWF  50
0917:  MOVF   78,W
0918:  MOVWF  4F
0919:  MOVF   77,W
091A:  MOVWF  4E
091B:  BCF    0A.3
091C:  CALL   622
091D:  BSF    0A.3
091E:  MOVF   79,W
091F:  MOVWF  28
0920:  MOVF   78,W
0921:  MOVWF  27
....................       pausa_fase_2 = 1; 
0922:  BSF    34.2
....................       pausa_fase_1 = 0; 
0923:  BCF    34.1
....................    } 
....................  
....................    if (contador_fase == 96 && !pausa_fase_1) { 
0924:  MOVF   29,W
0925:  SUBLW  60
0926:  BTFSS  03.2
0927:  GOTO   155
0928:  MOVF   2A,F
0929:  BTFSS  03.2
092A:  GOTO   155
092B:  BTFSC  34.1
092C:  GOTO   155
....................       intervalo_incremento = intervalo_incremento * 0.90; 
092D:  MOVF   28,W
092E:  MOVWF  4F
092F:  MOVF   27,W
0930:  MOVWF  4E
0931:  BCF    0A.3
0932:  CALL   590
0933:  BSF    0A.3
0934:  MOVF   7A,W
0935:  MOVWF  51
0936:  MOVF   79,W
0937:  MOVWF  50
0938:  MOVF   78,W
0939:  MOVWF  4F
093A:  MOVF   77,W
093B:  MOVWF  4E
093C:  MOVLW  66
093D:  MOVWF  55
093E:  MOVWF  54
093F:  MOVWF  53
0940:  MOVLW  7E
0941:  MOVWF  52
0942:  BCF    0A.3
0943:  CALL   5AD
0944:  BSF    0A.3
0945:  MOVF   7A,W
0946:  MOVWF  51
0947:  MOVF   79,W
0948:  MOVWF  50
0949:  MOVF   78,W
094A:  MOVWF  4F
094B:  MOVF   77,W
094C:  MOVWF  4E
094D:  BCF    0A.3
094E:  CALL   622
094F:  BSF    0A.3
0950:  MOVF   79,W
0951:  MOVWF  28
0952:  MOVF   78,W
0953:  MOVWF  27
....................       pausa_fase_1 = 1; 
0954:  BSF    34.1
....................    } 
....................  
....................    if (contador_fase == finalfase + 5) 
0955:  MOVLW  05
0956:  ADDWF  4A,W
0957:  SUBWF  29,W
0958:  BTFSS  03.2
0959:  GOTO   15E
095A:  MOVF   2A,F
095B:  BTFSS  03.2
095C:  GOTO   15E
....................       fase = 0; 
095D:  CLRF   2F
.................... } 
....................  
.................... void fase3() { 
....................    if ((contador_fase + 1) % 3 == 0 && !pausa_fase_1 && contador_fase < 30) { 
*
0963:  MOVLW  01
0964:  ADDWF  29,W
0965:  MOVWF  4E
0966:  MOVF   2A,W
0967:  MOVWF  4F
0968:  BTFSC  03.0
0969:  INCF   4F,F
096A:  MOVF   4F,W
096B:  MOVWF  53
096C:  MOVF   4E,W
096D:  MOVWF  52
096E:  CLRF   55
096F:  MOVLW  03
0970:  MOVWF  54
0971:  BCF    0A.3
0972:  CALL   41A
0973:  BSF    0A.3
0974:  MOVF   77,W
0975:  MOVWF  4E
0976:  MOVF   7A,W
0977:  MOVWF  4F
0978:  MOVF   4E,F
0979:  BTFSS  03.2
097A:  GOTO   1B2
097B:  MOVF   4F,F
097C:  BTFSS  03.2
097D:  GOTO   1B2
097E:  BTFSC  34.1
097F:  GOTO   1B2
0980:  MOVF   2A,F
0981:  BTFSS  03.2
0982:  GOTO   1B2
0983:  MOVF   29,W
0984:  SUBLW  1D
0985:  BTFSS  03.0
0986:  GOTO   1B2
....................       intervalo_incremento = intervalo_incremento * 0.94; 
0987:  MOVF   28,W
0988:  MOVWF  4F
0989:  MOVF   27,W
098A:  MOVWF  4E
098B:  BCF    0A.3
098C:  CALL   590
098D:  BSF    0A.3
098E:  MOVF   7A,W
098F:  MOVWF  51
0990:  MOVF   79,W
0991:  MOVWF  50
0992:  MOVF   78,W
0993:  MOVWF  4F
0994:  MOVF   77,W
0995:  MOVWF  4E
0996:  MOVLW  D7
0997:  MOVWF  55
0998:  MOVLW  A3
0999:  MOVWF  54
099A:  MOVLW  70
099B:  MOVWF  53
099C:  MOVLW  7E
099D:  MOVWF  52
099E:  BCF    0A.3
099F:  CALL   5AD
09A0:  BSF    0A.3
09A1:  MOVF   7A,W
09A2:  MOVWF  51
09A3:  MOVF   79,W
09A4:  MOVWF  50
09A5:  MOVF   78,W
09A6:  MOVWF  4F
09A7:  MOVF   77,W
09A8:  MOVWF  4E
09A9:  BCF    0A.3
09AA:  CALL   622
09AB:  BSF    0A.3
09AC:  MOVF   79,W
09AD:  MOVWF  28
09AE:  MOVF   78,W
09AF:  MOVWF  27
....................       pausa_fase_1 = 1; 
09B0:  BSF    34.1
....................       pausa_fase_2 = 0; 
09B1:  BCF    34.2
....................    } 
....................  
....................    if ((contador_fase + 1) % 4 == 0 && !pausa_fase_2 && (contador_fase + 1) % 12) { 
09B2:  MOVLW  01
09B3:  ADDWF  29,W
09B4:  MOVWF  4E
09B5:  MOVF   2A,W
09B6:  MOVWF  4F
09B7:  BTFSC  03.0
09B8:  INCF   4F,F
09B9:  MOVLW  03
09BA:  ANDWF  4E,F
09BB:  CLRF   4F
09BC:  MOVF   4E,F
09BD:  BTFSS  03.2
09BE:  GOTO   1DB
09BF:  MOVF   4F,F
09C0:  BTFSS  03.2
09C1:  GOTO   1DB
09C2:  BTFSC  34.2
09C3:  GOTO   1DB
09C4:  MOVLW  01
09C5:  ADDWF  29,W
09C6:  MOVWF  4E
09C7:  MOVF   2A,W
09C8:  MOVWF  4F
09C9:  BTFSC  03.0
09CA:  INCF   4F,F
09CB:  MOVF   4F,W
09CC:  MOVWF  53
09CD:  MOVF   4E,W
09CE:  MOVWF  52
09CF:  CLRF   55
09D0:  MOVLW  0C
09D1:  MOVWF  54
09D2:  BCF    0A.3
09D3:  CALL   41A
09D4:  BSF    0A.3
09D5:  MOVF   77,W
09D6:  IORWF  7A,W
09D7:  BTFSC  03.2
09D8:  GOTO   1DB
....................       pausa_fase_1 = 0; 
09D9:  BCF    34.1
....................       pausa_fase_2 = 1; 
09DA:  BSF    34.2
....................    } 
....................  
....................    if (contador_fase == finalfase + 5) 
09DB:  MOVLW  05
09DC:  ADDWF  4A,W
09DD:  SUBWF  29,W
09DE:  BTFSS  03.2
09DF:  GOTO   1E4
09E0:  MOVF   2A,F
09E1:  BTFSS  03.2
09E2:  GOTO   1E4
....................       fase = 0; 
09E3:  CLRF   2F
....................  
.................... } 
....................  
.................... void fase4() { 
....................    if (contador_fase == finalfase + 5) 
*
0A12:  MOVLW  05
0A13:  ADDWF  4A,W
0A14:  SUBWF  29,W
0A15:  BTFSS  03.2
0A16:  GOTO   21B
0A17:  MOVF   2A,F
0A18:  BTFSS  03.2
0A19:  GOTO   21B
....................       fase = 0; 
0A1A:  CLRF   2F
....................  
.................... } 
....................  
.................... void atualiza_valores() { 
....................    unidade = unidade_atual; 
....................    dezena = dezena_atual; 
....................    centena = centena_atual; 
....................    milhar = milhar_atual; 
.................... } 
....................  
.................... void escolha_de_fase() { 
....................  
....................    if (!input(S4)) { 
*
0543:  BSF    03.5
0544:  BSF    06.3
0545:  BCF    03.5
0546:  BTFSC  06.3
0547:  GOTO   54A
....................       fase = 4; 
0548:  MOVLW  04
0549:  MOVWF  2F
....................    } 
....................  
....................    if (!input(S3)) { 
054A:  BSF    03.5
054B:  BSF    06.2
054C:  BCF    03.5
054D:  BTFSC  06.2
054E:  GOTO   551
....................       fase = 3; 
054F:  MOVLW  03
0550:  MOVWF  2F
....................    } 
....................     
....................    if (!input(S2)) { 
0551:  BSF    03.5
0552:  BSF    06.1
0553:  BCF    03.5
0554:  BTFSC  06.1
0555:  GOTO   558
....................       fase = 2; 
0556:  MOVLW  02
0557:  MOVWF  2F
....................    } 
....................     
....................    if (!input(S1)) { 
0558:  BSF    03.5
0559:  BSF    06.0
055A:  BCF    03.5
055B:  BTFSC  06.0
055C:  GOTO   55F
....................       fase = 1; 
055D:  MOVLW  01
055E:  MOVWF  2F
....................    } 
....................     
....................    if (fase) { 
055F:  MOVF   2F,F
0560:  BTFSC  03.2
0561:  GOTO   58D
....................  
....................       output_low(DM); 
0562:  BSF    03.5
0563:  BCF    06.7
0564:  BCF    03.5
0565:  BCF    06.7
....................       output_low(DD); 
0566:  BSF    03.5
0567:  BCF    06.5
0568:  BCF    03.5
0569:  BCF    06.5
....................       output_low(DC); 
056A:  BSF    03.5
056B:  BCF    06.6
056C:  BCF    03.5
056D:  BCF    06.6
....................       output_low(DU); 
056E:  BSF    03.5
056F:  BCF    06.4
0570:  BCF    03.5
0571:  BCF    06.4
....................       tempo_inicio = 3; 
0572:  MOVLW  03
0573:  MOVWF  30
....................       intervalo_incremento = intervalo_incremento * 2; 
0574:  BCF    03.0
0575:  RLF    27,F
0576:  RLF    28,F
....................       output_high(DU); 
0577:  BSF    03.5
0578:  BCF    06.4
0579:  BCF    03.5
057A:  BSF    06.4
....................  
....................       while (tempo_inicio > 0) { 
057B:  MOVF   30,F
057C:  BTFSC  03.2
057D:  GOTO   58A
....................          unidade = tempo_inicio; 
057E:  MOVF   30,W
057F:  MOVWF  2B
....................          dezena = 12; 
0580:  MOVLW  0C
0581:  MOVWF  2C
....................          centena = 12;  
0582:  MOVWF  2D
....................          milhar = tempo_inicio; 
0583:  MOVF   30,W
0584:  MOVWF  2E
....................          atualiza_display(); 
0585:  CALL   4F6
....................          delay(30); 
0586:  MOVLW  1E
0587:  MOVWF  4E
0588:  CALL   43F
0589:  GOTO   57B
....................  
....................       } 
....................       intervalo_incremento = intervalo_incremento / 2; 
058A:  BCF    03.0
058B:  RRF    28,F
058C:  RRF    27,F
....................    } 
058D:  BCF    0A.3
058E:  BCF    0A.4
058F:  GOTO   76B (RETURN)
.................... } 
....................  
.................... void mostrar_falha() { 
....................    tempo_inicio = 7; 
*
0641:  MOVLW  07
0642:  MOVWF  30
....................  
....................    unidade = 12; 
0643:  MOVLW  0C
0644:  MOVWF  2B
....................    if ((contador_fase % 10)) { 
0645:  MOVF   2A,W
0646:  MOVWF  53
0647:  MOVF   29,W
0648:  MOVWF  52
0649:  CLRF   55
064A:  MOVLW  0A
064B:  MOVWF  54
064C:  CALL   41A
064D:  MOVF   77,W
064E:  IORWF  7A,W
064F:  BTFSC  03.2
0650:  GOTO   684
....................       dezena = -(contador_fase % 10) + 10; 
0651:  MOVF   2A,W
0652:  MOVWF  53
0653:  MOVF   29,W
0654:  MOVWF  52
0655:  CLRF   55
0656:  MOVLW  0A
0657:  MOVWF  54
0658:  CALL   41A
0659:  MOVF   77,W
065A:  SUBLW  00
065B:  MOVWF  4E
065C:  CLRF   4F
065D:  MOVF   7A,W
065E:  BTFSS  03.0
065F:  INCFSZ 7A,W
0660:  SUBWF  4F,F
0661:  MOVLW  0A
0662:  ADDWF  4E,W
0663:  MOVWF  2C
....................       centena = -((contador_fase / 10) % 10) + 9; 
0664:  MOVF   2A,W
0665:  MOVWF  53
0666:  MOVF   29,W
0667:  MOVWF  52
0668:  CLRF   55
0669:  MOVLW  0A
066A:  MOVWF  54
066B:  CALL   41A
066C:  MOVF   79,W
066D:  MOVWF  4F
066E:  MOVF   78,W
066F:  MOVWF  4E
0670:  MOVF   4F,W
0671:  MOVWF  53
0672:  MOVF   4E,W
0673:  MOVWF  52
0674:  CLRF   55
0675:  MOVLW  0A
0676:  MOVWF  54
0677:  CALL   41A
0678:  MOVF   77,W
0679:  SUBLW  00
067A:  MOVWF  4E
067B:  CLRF   4F
067C:  MOVF   7A,W
067D:  BTFSS  03.0
067E:  INCFSZ 7A,W
067F:  SUBWF  4F,F
0680:  MOVLW  09
0681:  ADDWF  4E,W
0682:  MOVWF  2D
....................    } else { 
0683:  GOTO   6A4
....................       dezena = 0; 
0684:  CLRF   2C
....................       centena = -((contador_fase / 10) % 10) + 10; 
0685:  MOVF   2A,W
0686:  MOVWF  53
0687:  MOVF   29,W
0688:  MOVWF  52
0689:  CLRF   55
068A:  MOVLW  0A
068B:  MOVWF  54
068C:  CALL   41A
068D:  MOVF   79,W
068E:  MOVWF  4F
068F:  MOVF   78,W
0690:  MOVWF  4E
0691:  MOVF   4F,W
0692:  MOVWF  53
0693:  MOVF   4E,W
0694:  MOVWF  52
0695:  CLRF   55
0696:  MOVLW  0A
0697:  MOVWF  54
0698:  CALL   41A
0699:  MOVF   77,W
069A:  SUBLW  00
069B:  MOVWF  4E
069C:  CLRF   4F
069D:  MOVF   7A,W
069E:  BTFSS  03.0
069F:  INCFSZ 7A,W
06A0:  SUBWF  4F,F
06A1:  MOVLW  0A
06A2:  ADDWF  4E,W
06A3:  MOVWF  2D
....................    } 
....................  
....................    milhar = 12; 
06A4:  MOVLW  0C
06A5:  MOVWF  2E
....................  
....................    while (tempo_inicio) { 
06A6:  MOVF   30,F
06A7:  BTFSC  03.2
06A8:  GOTO   6AE
....................       atualiza_display(); 
06A9:  CALL   4F6
....................  
....................       delay(15); 
06AA:  MOVLW  0F
06AB:  MOVWF  4E
06AC:  CALL   43F
06AD:  GOTO   6A6
....................    } 
06AE:  BCF    0A.3
06AF:  BCF    0A.4
06B0:  GOTO   776 (RETURN)
.................... } 
....................  
.................... void mostrar_tela_inicial() { 
....................  
....................    if (contador_tela_inicial == 1 || contador_tela_inicial == 2) { 
*
0447:  DECFSZ 49,W
0448:  GOTO   44A
0449:  GOTO   44E
044A:  MOVF   49,W
044B:  SUBLW  02
044C:  BTFSS  03.2
044D:  GOTO   494
....................  
....................       output_low(DM); 
044E:  BSF    03.5
044F:  BCF    06.7
0450:  BCF    03.5
0451:  BCF    06.7
....................       output_low(DU); 
0452:  BSF    03.5
0453:  BCF    06.4
0454:  BCF    03.5
0455:  BCF    06.4
....................  
....................       if (alternar_tela_inicial) { 
0456:  BTFSS  34.4
0457:  GOTO   476
....................          output_low(DC); 
0458:  BSF    03.5
0459:  BCF    06.6
045A:  BCF    03.5
045B:  BCF    06.6
....................          output_high(DD); 
045C:  BSF    03.5
045D:  BCF    06.5
045E:  BCF    03.5
045F:  BSF    06.5
....................          if (!passou_fase[2]) { 
0460:  BTFSC  4B.2
0461:  GOTO   46B
....................             output_d(listadisplay3[contador_tela_inicial]); 
0462:  MOVF   49,W
0463:  CALL   03F
0464:  MOVWF  4E
0465:  BSF    03.5
0466:  CLRF   08
0467:  BCF    03.5
0468:  MOVF   4E,W
0469:  MOVWF  08
....................          } else { 
046A:  GOTO   474
....................             output_d(listadisplay3[contador_tela_inicial + 6]); 
046B:  MOVLW  06
046C:  ADDWF  49,W
046D:  CALL   03F
046E:  MOVWF  4E
046F:  BSF    03.5
0470:  CLRF   08
0471:  BCF    03.5
0472:  MOVF   4E,W
0473:  MOVWF  08
....................          } 
....................  
....................          alternar_tela_inicial = 0; 
0474:  BCF    34.4
....................       } else { 
0475:  GOTO   493
....................          output_low(DD); 
0476:  BSF    03.5
0477:  BCF    06.5
0478:  BCF    03.5
0479:  BCF    06.5
....................          output_high(DC); 
047A:  BSF    03.5
047B:  BCF    06.6
047C:  BCF    03.5
047D:  BSF    06.6
....................  
....................          if (!passou_fase[1]) { 
047E:  BTFSC  4B.1
047F:  GOTO   489
....................             output_d(listadisplay2[contador_tela_inicial]); 
0480:  MOVF   49,W
0481:  CALL   04F
0482:  MOVWF  4E
0483:  BSF    03.5
0484:  CLRF   08
0485:  BCF    03.5
0486:  MOVF   4E,W
0487:  MOVWF  08
....................          } else { 
0488:  GOTO   492
....................             output_d(listadisplay2[contador_tela_inicial + 6]); 
0489:  MOVLW  06
048A:  ADDWF  49,W
048B:  CALL   04F
048C:  MOVWF  4E
048D:  BSF    03.5
048E:  CLRF   08
048F:  BCF    03.5
0490:  MOVF   4E,W
0491:  MOVWF  08
....................          } 
....................  
....................          alternar_tela_inicial = 1; 
0492:  BSF    34.4
....................       } 
....................  
....................    } else { 
0493:  GOTO   4D9
....................       output_low(DD); 
0494:  BSF    03.5
0495:  BCF    06.5
0496:  BCF    03.5
0497:  BCF    06.5
....................       output_low(DC); 
0498:  BSF    03.5
0499:  BCF    06.6
049A:  BCF    03.5
049B:  BCF    06.6
....................  
....................       if (alternar_tela_inicial) { 
049C:  BTFSS  34.4
049D:  GOTO   4BC
....................          output_low(DM); 
049E:  BSF    03.5
049F:  BCF    06.7
04A0:  BCF    03.5
04A1:  BCF    06.7
....................          output_high(DU); 
04A2:  BSF    03.5
04A3:  BCF    06.4
04A4:  BCF    03.5
04A5:  BSF    06.4
....................  
....................          if (!passou_fase[3]) { 
04A6:  BTFSC  4B.3
04A7:  GOTO   4B1
....................             output_d(listadisplay4[contador_tela_inicial]); 
04A8:  MOVF   49,W
04A9:  CALL   02F
04AA:  MOVWF  4E
04AB:  BSF    03.5
04AC:  CLRF   08
04AD:  BCF    03.5
04AE:  MOVF   4E,W
04AF:  MOVWF  08
....................          } else { 
04B0:  GOTO   4BA
....................             output_d(listadisplay4[contador_tela_inicial + 6]); 
04B1:  MOVLW  06
04B2:  ADDWF  49,W
04B3:  CALL   02F
04B4:  MOVWF  4E
04B5:  BSF    03.5
04B6:  CLRF   08
04B7:  BCF    03.5
04B8:  MOVF   4E,W
04B9:  MOVWF  08
....................          } 
....................  
....................          alternar_tela_inicial = 0; 
04BA:  BCF    34.4
....................       } else { 
04BB:  GOTO   4D9
....................          output_low(DU); 
04BC:  BSF    03.5
04BD:  BCF    06.4
04BE:  BCF    03.5
04BF:  BCF    06.4
....................          output_high(DM); 
04C0:  BSF    03.5
04C1:  BCF    06.7
04C2:  BCF    03.5
04C3:  BSF    06.7
....................  
....................          if (!passou_fase[0]) { 
04C4:  BTFSC  4B.0
04C5:  GOTO   4CF
....................             output_d(listadisplay1[contador_tela_inicial]); 
04C6:  MOVF   49,W
04C7:  CALL   05F
04C8:  MOVWF  4E
04C9:  BSF    03.5
04CA:  CLRF   08
04CB:  BCF    03.5
04CC:  MOVF   4E,W
04CD:  MOVWF  08
....................          } else { 
04CE:  GOTO   4D8
....................             output_d(listadisplay1[contador_tela_inicial + 6]); 
04CF:  MOVLW  06
04D0:  ADDWF  49,W
04D1:  CALL   05F
04D2:  MOVWF  4E
04D3:  BSF    03.5
04D4:  CLRF   08
04D5:  BCF    03.5
04D6:  MOVF   4E,W
04D7:  MOVWF  08
....................          } 
....................  
....................          alternar_tela_inicial = 1; 
04D8:  BSF    34.4
....................       } 
....................    } 
....................    delay(35); 
04D9:  MOVLW  23
04DA:  MOVWF  4E
04DB:  CALL   43F
04DC:  BCF    0A.3
04DD:  BCF    0A.4
04DE:  GOTO   743 (RETURN)
....................  
.................... } 
....................  
.................... void atualiza_display() { 
....................    delay(25); 
*
04F6:  MOVLW  19
04F7:  MOVWF  4E
04F8:  CALL   43F
....................    if (input_state(DU)) { 
04F9:  BTFSS  06.4
04FA:  GOTO   50C
....................       output_low(DU); 
04FB:  BSF    03.5
04FC:  BCF    06.4
04FD:  BCF    03.5
04FE:  BCF    06.4
....................       output_high(DD); 
04FF:  BSF    03.5
0500:  BCF    06.5
0501:  BCF    03.5
0502:  BSF    06.5
....................       output_d(display_numbers[dezena]); 
0503:  MOVF   2C,W
0504:  CALL   2BA
0505:  MOVWF  4E
0506:  BSF    03.5
0507:  CLRF   08
0508:  BCF    03.5
0509:  MOVF   4E,W
050A:  MOVWF  08
....................    } else if (input_state(DD)) { 
050B:  GOTO   542
050C:  BTFSS  06.5
050D:  GOTO   51F
....................       output_low(DD); 
050E:  BSF    03.5
050F:  BCF    06.5
0510:  BCF    03.5
0511:  BCF    06.5
....................       output_high(DC); 
0512:  BSF    03.5
0513:  BCF    06.6
0514:  BCF    03.5
0515:  BSF    06.6
....................       output_d(display_numbers[centena]); 
0516:  MOVF   2D,W
0517:  CALL   2BA
0518:  MOVWF  4E
0519:  BSF    03.5
051A:  CLRF   08
051B:  BCF    03.5
051C:  MOVF   4E,W
051D:  MOVWF  08
....................    } else if (input_state(DC)) { 
051E:  GOTO   542
051F:  BTFSS  06.6
0520:  GOTO   532
....................       output_low(DC); 
0521:  BSF    03.5
0522:  BCF    06.6
0523:  BCF    03.5
0524:  BCF    06.6
....................       output_high(DM); 
0525:  BSF    03.5
0526:  BCF    06.7
0527:  BCF    03.5
0528:  BSF    06.7
....................       output_d(display_numbers[milhar]); 
0529:  MOVF   2E,W
052A:  CALL   2BA
052B:  MOVWF  4E
052C:  BSF    03.5
052D:  CLRF   08
052E:  BCF    03.5
052F:  MOVF   4E,W
0530:  MOVWF  08
....................    } else { 
0531:  GOTO   542
....................       output_low(DM); 
0532:  BSF    03.5
0533:  BCF    06.7
0534:  BCF    03.5
0535:  BCF    06.7
....................       output_high(DU); 
0536:  BSF    03.5
0537:  BCF    06.4
0538:  BCF    03.5
0539:  BSF    06.4
....................       output_d(display_numbers[unidade]); 
053A:  MOVF   2B,W
053B:  CALL   2BA
053C:  MOVWF  4E
053D:  BSF    03.5
053E:  CLRF   08
053F:  BCF    03.5
0540:  MOVF   4E,W
0541:  MOVWF  08
....................    } 
0542:  RETURN
.................... } 
....................  
.................... void delay(int8 n) { 
....................    int8 i; 
....................    for (i = 0; i < n; i++) { 
*
043F:  CLRF   4F
0440:  MOVF   4E,W
0441:  SUBWF  4F,W
0442:  BTFSC  03.0
0443:  GOTO   446
0444:  INCF   4F,F
0445:  GOTO   440
....................       // NOP 
....................    } 
0446:  RETURN
.................... } 
....................  
.................... void verificar_botoes() { 
....................    if (!input(S4) && !unidade_ativode) { 
....................       unidade_ativo = 1; 
....................       unidade_ativode = 1; 
....................    } 
....................  
....................    if (!input(S3) && !dezena_ativode) { 
....................       dezena_ativo = 1; 
....................       dezena_ativode = 1; 
....................    } 
....................    if (!input(S2) && !centena_ativode) { 
....................       centena_ativo = 1; 
....................       centena_ativode = 1; 
....................    } 
....................    if (!input(S1) && !milhar_ativode) { 
....................       milhar_ativo = 1; 
....................       milhar_ativode = 1; 
....................    } 
....................  
....................    if (unidade_ativode) { 
....................       unidade_ativodecont--; 
....................       if (!unidade_ativodecont) { 
....................          unidade_ativodecont = V_CONTADOR_DECREMENTO; 
....................          unidade_ativode = 0; 
....................       } 
....................    } 
....................    if (dezena_ativode) { 
....................       dezena_ativodecont--; 
....................       if (!dezena_ativodecont) { 
....................          dezena_ativodecont = V_CONTADOR_DECREMENTO; 
....................          dezena_ativode = 0; 
....................       } 
....................    } 
....................    if (centena_ativode) { 
....................       centena_ativodecont--; 
....................       if (!centena_ativodecont) { 
....................          centena_ativodecont = V_CONTADOR_DECREMENTO; 
....................          centena_ativode = 0; 
....................       } 
....................    } 
....................    if (milhar_ativode) { 
....................       milhar_ativodecont--; 
....................       if (!milhar_ativodecont) { 
....................          milhar_ativodecont = V_CONTADOR_DECREMENTO; 
....................          milhar_ativode = 0; 
....................       } 
....................    } 
....................  
.................... } 
....................  
.................... void verificar_erro_nove() { 
....................    if ((unidade_ativo && unidade) || (dezena_ativo && dezena) || (centena_ativo && centena) || (milhar_ativo && milhar)) { 
*
02F5:  BTFSS  33.0
02F6:  GOTO   2FA
02F7:  MOVF   2B,F
02F8:  BTFSS  03.2
02F9:  GOTO   308
02FA:  BTFSS  33.1
02FB:  GOTO   2FF
02FC:  MOVF   2C,F
02FD:  BTFSS  03.2
02FE:  GOTO   308
02FF:  BTFSS  33.2
0300:  GOTO   304
0301:  MOVF   2D,F
0302:  BTFSS  03.2
0303:  GOTO   308
0304:  BTFSS  33.3
0305:  GOTO   309
0306:  MOVF   2E,F
0307:  BTFSS  03.2
....................       fase = 0; 
0308:  CLRF   2F
....................    } 
.................... } 
....................  
.................... void verificar_erro_zero() { 
....................    if ((!unidade_ativo && !unidade) || (!dezena_ativo && !dezena) || (!centena_ativo && !centena) || (!milhar_ativo && !milhar)) { 
0309:  BTFSC  33.0
030A:  GOTO   30E
030B:  MOVF   2B,F
030C:  BTFSC  03.2
030D:  GOTO   31C
030E:  BTFSC  33.1
030F:  GOTO   313
0310:  MOVF   2C,F
0311:  BTFSC  03.2
0312:  GOTO   31C
0313:  BTFSC  33.2
0314:  GOTO   318
0315:  MOVF   2D,F
0316:  BTFSC  03.2
0317:  GOTO   31C
0318:  BTFSC  33.3
0319:  GOTO   31D
031A:  MOVF   2E,F
031B:  BTFSC  03.2
....................       fase = 0; 
031C:  CLRF   2F
....................    } 
....................  
.................... } 
....................  
.................... void testar_listas() { 
....................    atualizar_unidade(); 
....................    atualizar_dezena(); 
....................    atualizar_centena(); 
....................    atualizar_milhar(); 
....................  
.................... } 
....................  
.................... void atualizar_unidade() { 
....................  
....................    if (fase == 1) 
*
0325:  DECFSZ 2F,W
0326:  GOTO   32D
....................       unidade_atual = u1[contador_u] - decremento_u; 
0327:  MOVF   39,W
0328:  CALL   06F
0329:  MOVWF  78
032A:  MOVF   3D,W
032B:  SUBWF  78,W
032C:  MOVWF  35
....................  
....................    if (fase == 2) 
032D:  MOVF   2F,W
032E:  SUBLW  02
032F:  BTFSS  03.2
0330:  GOTO   337
....................       unidade_atual = u2[contador_u] - decremento_u; 
0331:  MOVF   39,W
0332:  CALL   0F4
0333:  MOVWF  78
0334:  MOVF   3D,W
0335:  SUBWF  78,W
0336:  MOVWF  35
....................  
....................    if (fase == 3) 
0337:  MOVF   2F,W
0338:  SUBLW  03
0339:  BTFSS  03.2
033A:  GOTO   341
....................       unidade_atual = u3[contador_u] - decremento_u; 
033B:  MOVF   39,W
033C:  CALL   190
033D:  MOVWF  78
033E:  MOVF   3D,W
033F:  SUBWF  78,W
0340:  MOVWF  35
....................  
....................    if (fase == 4) 
0341:  MOVF   2F,W
0342:  SUBLW  04
0343:  BTFSS  03.2
0344:  GOTO   34B
....................       unidade_atual = u4[contador_u] - decremento_u; 
0345:  MOVF   39,W
0346:  CALL   23C
0347:  MOVWF  78
0348:  MOVF   3D,W
0349:  SUBWF  78,W
034A:  MOVWF  35
....................  
....................    if (unidade_atual <= 9) { 
034B:  MOVF   35,W
034C:  SUBLW  09
034D:  BTFSS  03.0
034E:  GOTO   357
....................       if (!unidade_atual) { 
034F:  MOVF   35,F
0350:  BTFSS  03.2
0351:  GOTO   355
....................          contador_u++; 
0352:  INCF   39,F
....................          decremento_u = 0; 
0353:  CLRF   3D
....................       } else { 
0354:  GOTO   356
....................          decremento_u++; 
0355:  INCF   3D,F
....................       } 
....................    } else { 
0356:  GOTO   358
....................       contador_u++; 
0357:  INCF   39,F
....................    } 
....................  
.................... } 
.................... void atualizar_dezena() { 
....................  
....................    if (fase == 1) 
0358:  DECFSZ 2F,W
0359:  GOTO   360
....................       dezena_atual = d1[contador_d] - decremento_d; 
035A:  MOVF   3A,W
035B:  CALL   089
035C:  MOVWF  78
035D:  MOVF   3E,W
035E:  SUBWF  78,W
035F:  MOVWF  36
....................  
....................    if (fase == 2) 
0360:  MOVF   2F,W
0361:  SUBLW  02
0362:  BTFSS  03.2
0363:  GOTO   36A
....................       dezena_atual = d2[contador_d] - decremento_d; 
0364:  MOVF   3A,W
0365:  CALL   11F
0366:  MOVWF  78
0367:  MOVF   3E,W
0368:  SUBWF  78,W
0369:  MOVWF  36
....................  
....................    if (fase == 3) 
036A:  MOVF   2F,W
036B:  SUBLW  03
036C:  BTFSS  03.2
036D:  GOTO   374
....................       dezena_atual = d3[contador_d] - decremento_d; 
036E:  MOVF   3A,W
036F:  CALL   1B8
0370:  MOVWF  78
0371:  MOVF   3E,W
0372:  SUBWF  78,W
0373:  MOVWF  36
....................  
....................    if (fase == 4) 
0374:  MOVF   2F,W
0375:  SUBLW  04
0376:  BTFSS  03.2
0377:  GOTO   37E
....................       dezena_atual = d4[contador_d] - decremento_d; 
0378:  MOVF   3A,W
0379:  CALL   258
037A:  MOVWF  78
037B:  MOVF   3E,W
037C:  SUBWF  78,W
037D:  MOVWF  36
....................  
....................    if (dezena_atual <= 9) { 
037E:  MOVF   36,W
037F:  SUBLW  09
0380:  BTFSS  03.0
0381:  GOTO   38A
....................       if (!dezena_atual) { 
0382:  MOVF   36,F
0383:  BTFSS  03.2
0384:  GOTO   388
....................          contador_d++; 
0385:  INCF   3A,F
....................          decremento_d = 0; 
0386:  CLRF   3E
....................       } else { 
0387:  GOTO   389
....................          decremento_d++; 
0388:  INCF   3E,F
....................       } 
....................    } else { 
0389:  GOTO   38B
....................       contador_d++; 
038A:  INCF   3A,F
....................    } 
....................  
.................... } 
.................... void atualizar_centena() { 
....................  
....................    if (fase == 1) 
038B:  DECFSZ 2F,W
038C:  GOTO   393
....................       centena_atual = c1[contador_c] - decremento_c; 
038D:  MOVF   3B,W
038E:  CALL   0AF
038F:  MOVWF  78
0390:  MOVF   3F,W
0391:  SUBWF  78,W
0392:  MOVWF  37
....................  
....................    if (fase == 2) 
0393:  MOVF   2F,W
0394:  SUBLW  02
0395:  BTFSS  03.2
0396:  GOTO   39D
....................       centena_atual = c2[contador_c] - decremento_c; 
0397:  MOVF   3B,W
0398:  CALL   149
0399:  MOVWF  78
039A:  MOVF   3F,W
039B:  SUBWF  78,W
039C:  MOVWF  37
....................  
....................    if (fase == 3) 
039D:  MOVF   2F,W
039E:  SUBLW  03
039F:  BTFSS  03.2
03A0:  GOTO   3A7
....................       centena_atual = c3[contador_c] - decremento_c; 
03A1:  MOVF   3B,W
03A2:  CALL   1E4
03A3:  MOVWF  78
03A4:  MOVF   3F,W
03A5:  SUBWF  78,W
03A6:  MOVWF  37
....................  
....................    if (fase == 4) 
03A7:  MOVF   2F,W
03A8:  SUBLW  04
03A9:  BTFSS  03.2
03AA:  GOTO   3B1
....................       centena_atual = c4[contador_c] - decremento_c; 
03AB:  MOVF   3B,W
03AC:  CALL   27C
03AD:  MOVWF  78
03AE:  MOVF   3F,W
03AF:  SUBWF  78,W
03B0:  MOVWF  37
....................  
....................    if (centena_atual <= 9) { 
03B1:  MOVF   37,W
03B2:  SUBLW  09
03B3:  BTFSS  03.0
03B4:  GOTO   3BD
....................       if (!centena_atual) { 
03B5:  MOVF   37,F
03B6:  BTFSS  03.2
03B7:  GOTO   3BB
....................          contador_c++; 
03B8:  INCF   3B,F
....................          decremento_c = 0; 
03B9:  CLRF   3F
....................       } else { 
03BA:  GOTO   3BC
....................          decremento_c++; 
03BB:  INCF   3F,F
....................       } 
....................    } else { 
03BC:  GOTO   3BE
....................       contador_c++; 
03BD:  INCF   3B,F
....................    } 
....................  
.................... } 
.................... void atualizar_milhar() { 
....................  
....................    if (fase == 1) 
03BE:  DECFSZ 2F,W
03BF:  GOTO   3C6
....................       milhar_atual = m1[contador_m] - decremento_m; 
03C0:  MOVF   3C,W
03C1:  CALL   0D3
03C2:  MOVWF  78
03C3:  MOVF   40,W
03C4:  SUBWF  78,W
03C5:  MOVWF  38
....................  
....................    if (fase == 2) 
03C6:  MOVF   2F,W
03C7:  SUBLW  02
03C8:  BTFSS  03.2
03C9:  GOTO   3D0
....................       milhar_atual = m2[contador_m] - decremento_m; 
03CA:  MOVF   3C,W
03CB:  CALL   170
03CC:  MOVWF  78
03CD:  MOVF   40,W
03CE:  SUBWF  78,W
03CF:  MOVWF  38
....................  
....................    if (fase == 3) 
03D0:  MOVF   2F,W
03D1:  SUBLW  03
03D2:  BTFSS  03.2
03D3:  GOTO   3DA
....................       milhar_atual = m3[contador_m] - decremento_m; 
03D4:  MOVF   3C,W
03D5:  CALL   213
03D6:  MOVWF  78
03D7:  MOVF   40,W
03D8:  SUBWF  78,W
03D9:  MOVWF  38
....................  
....................    if (fase == 4) 
03DA:  MOVF   2F,W
03DB:  SUBLW  04
03DC:  BTFSS  03.2
03DD:  GOTO   3E4
....................       milhar_atual = m4[contador_m] - decremento_m; 
03DE:  MOVF   3C,W
03DF:  CALL   2A0
03E0:  MOVWF  78
03E1:  MOVF   40,W
03E2:  SUBWF  78,W
03E3:  MOVWF  38
....................  
....................    if (milhar_atual <= 9) { 
03E4:  MOVF   38,W
03E5:  SUBLW  09
03E6:  BTFSS  03.0
03E7:  GOTO   3F0
....................       if (!milhar_atual) { 
03E8:  MOVF   38,F
03E9:  BTFSS  03.2
03EA:  GOTO   3EE
....................          contador_m++; 
03EB:  INCF   3C,F
....................          decremento_m = 0; 
03EC:  CLRF   40
....................       } else { 
03ED:  GOTO   3EF
....................          decremento_m++; 
03EE:  INCF   40,F
....................       } 
....................    } else { 
03EF:  GOTO   3F1
....................       contador_m++; 
03F0:  INCF   3C,F
....................    } 
....................  
.................... } 

Configuration Fuses:
   Word  1: 3971   XT NOWDT PUT BROWNOUT NOLVP NOCPD WRT_1000 NODEBUG NOPROTECT
