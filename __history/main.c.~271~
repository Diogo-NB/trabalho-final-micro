#include <main.h>

#define  V_FILTRO 100

#define  V_CONTADOR_DISPLAY  1

#define  V_CONT_SEQUENCIA_FASE1  450
#define  V_CONT_SEQUENCIA_FASE2  333
#define  V_CONT_SEQUENCIA_FASE3  250
#define  V_CONT_SEQUENCIA_FASE4  200

#define  TAM_SEQUENCIA  20

int16 v_cont_sequencia;

int8 filtro[] = {0, 0, 0, 0};
int1 lido[] = {0, 0, 0, 0};

int8 contador_display = 0;
int1 atualiza_display = 0;

int16 cont_sequencia = 0;
int1 atualiza_sequencia = 0;

int16 pontos = 0;

int8 estado = 0; // Estado do jogo : 0 - menu inicial ; 1 - fase 1 ; 2 - fase 2 ; 3 - fase 3 ; 4 - fase 4 ; 5 - falha

int8 d_index = 0; // index dos digitos 

const int8 display_numbers[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
int8 digitos[] = {0, 0, 0, 0};

const int8 sequencia_fase1[] = {2, 3, 5, 7, 9, 6, 8, 4, 2, 3, 6, 9, 7, 4, 5, 8, 2, 3, 7, 6};
const int8 sequencia_fase2[] = {4, 6, 8, 9, 7, 5, 3, 2, 9, 6, 8, 7, 3, 5, 4, 9, 2, 6, 8, 7};
const int8 sequencia_fase3[] = {9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 4, 5, 7, 3, 9, 6, 8, 2, 5, 4};
const int8 sequencia_fase4[] = {3, 5, 7, 2, 8, 4, 6, 9, 3, 7, 8, 6, 2, 5, 9, 4, 7, 3, 6, 8};

int8 i_sequencia_atual = 0;

#INT_TIMER0
void  TIMER0_isr(void) 
{
   set_timer0(get_timer0() + 6);
   contador_display--;
   if (!contador_display) { // 200ms
      contador_display = V_CONTADOR_DISPLAY;
      atualiza_display = 1;
   }
   
   cont_sequencia--;
   if (!cont_sequencia) {
      cont_sequencia = v_cont_sequencia;
      atualiza_sequencia = 1;
   }
}

int1 filter_bt_state(int1 state, int8 i);

int8 get_prox_valor_sequencia();

void atualiza_displayf();

void atualiza_sequenciaf();

void inicializa_fase();

void escolha_fase();

void main()
{
   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_16|RTCC_8_BIT);

   enable_interrupts(INT_TIMER0);
   enable_interrupts(GLOBAL);
   
   while(TRUE)
   {
      output_b(0x0F);
      output_d(0);
      output_high(DU);
      i_sequencia_atual = 3;
      
//!      output_b(0xFF);
//!      output_d(0);
//!      output_low(DU);

      pontos = 1234;

      digitos[0] = (pontos / 1000) % 10;
      digitos[1] = (pontos / 100) % 10 ;
      digitos[2] = (pontos / 10) % 10;
      digitos[3] = pontos % 10;
     
      while (!estado) {
         if (atualiza_display) {
            atualiza_display = 0;
            atualiza_displayf();
         }
         
         escolha_fase();
      }
      
      delay_ms(100);
      
      inicializa_fase();
      
      while (estado) {
         if (pontos >= 25) {
            estado = 0;
         }
         
         if (atualiza_display) {
            atualiza_display = 0;
            atualiza_displayf();
         }
         
         if (atualiza_sequencia) {
            atualiza_sequencia = 0;
            atualiza_sequenciaf();
         }
      
         if (filter_bt_state(input_state(S1), 0)) {
            if (!digitos[0]) {
               pontos++;
               digitos[0] = get_prox_valor_sequencia(); 
            } else {
               estado = 0;
            }
         }
         
         if (filter_bt_state(input_state(S2), 1)) {
            if (!digitos[1]) {
               pontos++;
               digitos[1] = get_prox_valor_sequencia(); 
            } else {
               estado = 0;
            }
         }
         
         if (filter_bt_state(input_state(S3), 2)) {
            if (!digitos[2]) {
               pontos++;
               digitos[2] = get_prox_valor_sequencia(); 
            } else {
               estado = 0;
            }
         }
         
         if (filter_bt_state(input_state(S4), 3)) {
            if (!digitos[3]) {
               pontos++;
               digitos[3] = get_prox_valor_sequencia(); 
            } else {
               estado = 0;
            }
         }
      }
      
      delay_ms(250);  
   }

}

int8 get_prox_valor_sequencia() {
   i_sequencia_atual++;
   if (i_sequencia_atual >= TAM_SEQUENCIA) {
      i_sequencia_atual = 0;
   }
   
   switch (estado) {
      case 1:
         return sequencia_fase1[i_sequencia_atual];  
      break; 
      case 2:
         return sequencia_fase2[i_sequencia_atual]; 
      break; 
      case 3:
         return sequencia_fase3[i_sequencia_atual];           
      break; 
      case 4:
         return sequencia_fase4[i_sequencia_atual];           
      break;          
   }
}

void atualiza_sequenciaf() {
   for (int8 i = 0; i < 4; i++) {
      if (!digitos[i]) {
         estado = 0; // falha
      }
      digitos[i]--;
   }
}

void inicializa_fase() {
    switch (estado) {
      case 1:
         for (int8 i = 0; i < 4; i++) {
            digitos[i] = sequencia_fase1[i];
         }   
         v_cont_sequencia = V_CONT_SEQUENCIA_FASE1;
      break; 
      case 2:
         for (int8 i = 0; i < 4; i++) {
            digitos[i] = sequencia_fase2[i];
         }   
         v_cont_sequencia = V_CONT_SEQUENCIA_FASE2;
      break; 
      case 3:
         for (int8 i = 0; i < 4; i++) {
            digitos[i] = sequencia_fase3[i];
         }   
         v_cont_sequencia = V_CONT_SEQUENCIA_FASE3;            
      break; 
      case 4:
         for (int8 i = 0; i < 4; i++) {
            digitos[i] = sequencia_fase4[i];
         }   
         v_cont_sequencia = V_CONT_SEQUENCIA_FASE4;            
      break;          
   }
   
   cont_sequencia = v_cont_sequencia;
   atualiza_sequencia = 0;
   contador_display = V_CONTADOR_DISPLAY;
   atualiza_display = 1;
}

void escolha_fase() {
   if (!input_state(S1)) {
      estado = 1;
   }
   if (!input_state(S2)) {
      estado = 2;
   }
   if (!input_state(S3)) {
      estado = 3;
   }
   if (!input_state(S4)) {
      estado = 4;
   }
}

int1 filter_bt_state(int1 state, int8 i) {
    if (state) {
      filtro[i] = V_FILTRO;
      lido[i] = 0; 
   } else if (!lido[i]) {
      filtro[i]--;
      if (!filtro[i]) {
         filtro[i] = V_FILTRO;
         lido[i] = 1;
         return 1;
      }     
   }
   
   return 0;
}

void atualiza_displayf() {
   switch (d_index) {
      case 0:
         // ativa unidade
         output_low(DM);
         output_high(DU);
      break; 
       case 1:
         // ativa dezena
         output_low(DU);
         output_high(DD);
      break; 
      case 2:
         // ativa centena
         output_low(DD);
         output_high(DC);
      break; 
      case 3:
         // ativa milhar
         output_low(DC);
         output_high(DM);
      break; 
   }
   
   output_d(display_numbers[digitos[d_index]]);
   
   d_index++;
   if (d_index >= 4) {
      d_index = 0;
   }
}

//!void atualiza_displayf() {
//!   switch (d_index) {
//!      case 0:
//!         // ativa unidade
//!         output_high(DM);
//!         output_low(DU);
//!      break; 
//!       case 1:
//!         // ativa dezena
//!         output_high(DU);
//!         output_low(DD);
//!      break; 
//!      case 2:
//!         // ativa centena
//!         output_high(DD);
//!         output_low(DC);
//!      break; 
//!      case 3:
//!         // ativa milhar
//!         output_high(DC);
//!         output_low(DM);
//!      break; 
//!   }
//!   
//!   output_d(display_numbers[digitos[d_index]]);
//!   
//!   d_index++;
//!   if (d_index >= 4) {
//!      d_index = 0;
//!   }
//!}

