#include <main.h>

#define V_CONTADOR_DECREMENTO 200

int16 intervalo_incremento = 1000;
int16 contador_fase = 0;
int8 unidade, dezena, centena, milhar;

int8 fase = 0;
int8 tempo_inicio;
int16 velocidade;
int1 unidade_ativo = 0, dezena_ativo = 0, centena_ativo = 0, milhar_ativo = 0;
int1 unidade_ativode = 0, dezena_ativode = 0, centena_ativode = 0, milhar_ativode = 0;
int1 comeca = 0;

int8 unidade_atual, dezena_atual, centena_atual, milhar_atual;
int8 contador_u = 0, contador_d = 0, contador_c = 0, contador_m = 0;
int8 decremento_u = 0, decremento_d = 0, decremento_c = 0, decremento_m = 0;

int1 pausa_fase_1 = 0, pausa_fase_2 = 0, pausa_fase_3 = 0;

int16 unidade_ativodecont, dezena_ativodecont, centena_ativodecont, milhar_ativodecont;

int8 contador_tela_inicial = 0;
int8 finalfase = 100;
int1 alternar_tela_inicial = 0;

const int8 listadisplay4[] = {0x08,0x00,0x00,0x01,0x02,0x04,0b01001000,0b01000000,0b01000000,0b01000001,0b01000010,0b01000100};
const int8 listadisplay3[] = {0x00,0x08,0x01,0x00,0x00,0x00,0x00,0b01001000,0b01000001,0x00,0x00,0x00};
const int8 listadisplay2[] = {0x00,0x01,0x08,0x00,0x00,0x00,0x00,0b01000001,0b01001000,0x00,0x00,0x00};
const int8 listadisplay1[] = {0x01,0x00,0x00,0x08,0x10,0x20,0b01000001,0b01000000,0b01000000,0b01001000,0b01010000,0b01100000};

const int8 u1 [] = {4, 3, 3, 3, 5, 5, 8, 8, 4, 3, 3, 3, 5, 5, 8, 8, 5, 10, 11, 11, 12, 12};
const int8 d1 [] = {3,0 , 2, 6, 4, 2, 2, 3, 2, 1, 1, 4, 2, 5,0, 2, 6, 4, 2, 2, 3, 2, 1, 1, 4, 2, 5, 10, 10, 10, 11, 11, 12, 12};
const int8 c1 [] = {3,0 , 2, 6, 2, 5, 2, 2, 7, 5, 2, 3, 2, 6,0, 2, 5, 2, 2, 7, 5, 2, 1, 10, 10, 10, 10, 10, 11, 11, 12, 12};
const int8 m1 [] = {2, 1, 1, 1, 9, 5, 3, 3, 2, 4, 8, 1, 1, 1, 9, 5, 3, 3, 2, 4, 8, 10, 10, 10, 10, 11, 11, 12, 12};

const int8 u2[] = {1, 5, 2, 1, 5, 2, 1, 2, 1, 1, 1,1, 5, 2, 1, 5, 2, 1, 2, 1, 1, 1, 1, 8, 7,6,4, 10, 10, 10, 10, 11, 11, 11, 12, 12};
const int8 d2[] = {2, 3, 2, 1, 1, 3, 2, 1, 2, 1, 1, 1, 3, 3, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 3,8, 6, 1,6,4, 10, 10, 10, 11, 11, 11, 12, 12};
const int8 c2[] = {3, 1, 3, 1, 2, 1, 3, 1, 3, 1, 7,1, 3, 1, 2, 1, 3, 1, 3, 1, 7, 1, 1, 2, 5, 3,6,4, 10, 10, 11, 11, 11, 12, 12};
const int8 m2[] = {4, 5, 4, 5, 3, 1, 1, 7, 5, 4, 5, 3, 1, 1, 7, 1, 1, 1, 4, 5,6,4, 10, 11, 11, 11, 12, 12};

const int8 u3[] = {2, 2, 2, 2, 3, 3, 2, 1, 1, 1, 1, 3, 1, 4, 6, 2, 2, 5, 2, 2, 2, 2, 4, 2, 5, 2, 1, 1, 1, 1, 1, 11, 11, 11, 12, 12};
const int8 d3[] = {2, 2, 2, 2, 3, 3, 4, 3, 3, 1, 1, 2, 1, 1, 4, 2, 5, 2, 2, 2, 2, 2, 3, 1, 2, 3, 2, 2, 1, 10, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12};
const int8 c3[] = {2, 2, 2, 2, 3, 6, 3, 1, 1, 1, 2, 1, 1, 3, 1, 2, 5, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, 2, 3, 1, 1, 10, 10, 10, 10, 11, 11, 11, 12, 12};
const int8 m3[] = {2, 2, 2, 2, 3, 3, 2, 1, 1, 3, 1, 2, 1, 7, 5, 2, 2, 2, 2, 2, 2, 2, 1, 5, 2, 2, 4, 1, 1, 1, 10, 10, 11, 11, 11, 12, 12};

const int8 u4[] = {6, 1, 7, 3, 2, 3, 7, 7, 5,6, 1, 7, 3, 2, 3, 7, 7, 5, 10, 10, 11, 11, 12, 12};
const int8 d4[] = {5, 1, 1, 5, 3, 4, 3, 3, 1, 1, 1, 3, 6,5, 1, 1, 5, 3, 4, 3, 3, 1, 1, 1, 3, 6, 10, 10, 11, 11, 12, 12};
const int8 c4[] = {4, 5, 1, 1, 3, 6, 3, 1, 1, 3, 1, 1, 7,4, 5, 1, 1, 3, 6, 3, 1, 1, 3, 1, 1, 7, 10, 10, 11, 11, 12, 12};
const int8 m4[] = {3, 7, 1, 3, 8, 3, 9, 8, 3, 7, 1, 3, 8, 3, 9, 8,10, 10, 11, 11, 12, 12};

const int8 display_numbers[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0b00001000,0b01001000,0b01001001};

int1 pasou_fase_1 = 0;
int1 pasou_fase_2 = 0;
int1 pasou_fase_3 = 0;
int1 pasou_fase_4 = 0;

int16 contador_ms = 0;

void verificar_erro_zero();
void verificar_erro_nove();

void tela_inicial();

void escolha_de_fase();

void fase1();
void fase4();
void fase3();
void fase2();

void mostrar_falha();

void delay(int8 n);
void verificar_botoes();
void atualiza_display();

void lista_u();
void lista_d();
void lista_c();
void lista_m();
void testalista();

void atualiza_valores();

#INT_TIMER0
void TIMER0_isr(void) {
   set_timer0(get_timer0() + 131);

   contador_ms++;

   if (contador_ms >= intervalo_incremento) { // Se atingir o intervalo de 1 segundo
      contador_ms = 0;

      pausa_fase_3 = 0;

      contador_tela_inicial++;

      if (tempo_inicio) {
         tempo_inicio--;
         decremento_u = 0;
         contador_u = 0;
         decremento_d = 0;
         contador_d = 0;
         decremento_c = 0;
         contador_c = 0;
         decremento_m = 0;
         contador_m = 0;
      }

      if (fase && comeca) {
         contador_fase++;
         verificar_erro_nove();
         verificar_erro_zero();
         unidade_ativo = 0;
         dezena_ativo = 0;
         centena_ativo = 0;
         milhar_ativo = 0;
      }

      if (contador_tela_inicial > 5) { // Se o contador_fase atingir 0, reseta para 9999
         contador_tela_inicial = 0;
      }
      testalista();

   }
}
void main() {
   setup_timer_0(RTCC_INTERNAL | RTCC_DIV_8 | RTCC_8_BIT); // 1ms overflow
   enable_interrupts(INT_TIMER0);
   enable_interrupts(GLOBAL);

   output_d(0);

   fase = 0;
   unidade_ativodecont = V_CONTADOR_DECREMENTO;
   dezena_ativodecont = V_CONTADOR_DECREMENTO;
   centena_ativodecont = V_CONTADOR_DECREMENTO;
   milhar_ativodecont = V_CONTADOR_DECREMENTO;

   while (TRUE) {

      if (!fase) {
         intervalo_incremento = intervalo_incremento / (3 * (pasou_fase_1 + pasou_fase_2 + pasou_fase_3 + pasou_fase_4) + 5);
         tela_inicial();
         intervalo_incremento = intervalo_incremento * (3 * (pasou_fase_1 + pasou_fase_2 + pasou_fase_3 + pasou_fase_4) + 5);
         escolha_de_fase();

         if (fase == 1) {
            contador_fase = 0;
            comeca = 1;
            velocidade = intervalo_incremento;
            pausa_fase_1 = 0;
            pausa_fase_2 = 0;
            while (fase) {
               fase1();
            }
            comeca = 0;

            if (contador_fase < finalfase) {
               mostrar_falha();
               contador_fase = 0;
            }

            if (contador_fase >= finalfase + 4)
               pasou_fase_1 = 1;

            intervalo_incremento = velocidade;
            fase = 0;

         }

         if (fase == 2) {
            contador_fase = 0;
            comeca = 1;
            velocidade = intervalo_incremento;
            pausa_fase_1 = 0;
            pausa_fase_2 = 0;
            while (fase) {
               fase2();
            }
            comeca = 0;

            if (contador_fase < finalfase) {
               mostrar_falha();
               contador_fase = 0;
            }
            if (contador_fase >= finalfase + 4)
               pasou_fase_2 = 1;

            intervalo_incremento = velocidade;
            fase = 0;
         }

         if (fase == 3) {
            contador_fase = 0;
            comeca = 1;
            velocidade = intervalo_incremento;
            pausa_fase_1 = 0;
            pausa_fase_2 = 0;
            while (fase) {
               fase3();
            }
            comeca = 0;

            if (contador_fase < finalfase) {
               mostrar_falha();
               contador_fase = 0;
            }
            if (contador_fase >= finalfase + 4)
               pasou_fase_3 = 1;

            intervalo_incremento = velocidade;
            fase = 0;

         }

         if (fase == 4) {
            contador_fase = 0;
            comeca = 1;
            velocidade = intervalo_incremento;
            pausa_fase_1 = 0;
            pausa_fase_2 = 0;
            intervalo_incremento = intervalo_incremento * 0.60;
            while (fase) {
               fase4();
            }
            comeca = 0;

            if (contador_fase < finalfase) {
               mostrar_falha();
               contador_fase = 0;
            }
            if (contador_fase >= finalfase + 4)
               pasou_fase_4 = 1;

            intervalo_incremento = velocidade;
            fase = 0;
         }

      }
      contador_fase = 0;
   }
}

void fase1() {
   atualiza_valores();

   atualiza_display();
   verificar_botoes();

   if (contador_fase == 50 && !pausa_fase_1) {
      intervalo_incremento = intervalo_incremento * 0.85;
      pausa_fase_1 = 1;
   }

   if (contador_fase == 75 && !pausa_fase_2) {
      intervalo_incremento = intervalo_incremento * 0.85;
      pausa_fase_2 = 1;
   }

   if (contador_fase == finalfase + 5)
      fase = 0;

}

void fase2() {
   atualiza_valores();

   atualiza_display();
   verificar_botoes();

   if (contador_fase == 12 && !pausa_fase_1) {
      intervalo_incremento = intervalo_incremento * 0.90;
      pausa_fase_1 = 1;
   }

   if (contador_fase == 24 && !pausa_fase_2) {
      intervalo_incremento = velocidade;
      pausa_fase_2 = 1;
      pausa_fase_1 = 0;
   }

   if (contador_fase == 48 && !pausa_fase_1) {
      intervalo_incremento = intervalo_incremento * 0.80;
      pausa_fase_2 = 0;
      pausa_fase_1 = 1;
   }

   if (contador_fase == 72 && !pausa_fase_2) {
      intervalo_incremento = intervalo_incremento * 0.90;
      pausa_fase_2 = 1;
      pausa_fase_1 = 0;
   }

   if (contador_fase == 96 && !pausa_fase_1) {
      intervalo_incremento = intervalo_incremento * 0.90;
      pausa_fase_1 = 1;
   }

   if (contador_fase == finalfase + 5)
      fase = 0;
}

void fase3() {

   atualiza_valores();
   atualiza_display();
   verificar_botoes();

   if ((contador_fase + 1) % 3 == 0 && !pausa_fase_1 && contador_fase < 30) {
      intervalo_incremento = intervalo_incremento * 0.94;
      pausa_fase_1 = 1;
      pausa_fase_2 = 0;
   }

   if ((contador_fase + 1) % 4 == 0 && !pausa_fase_2 && (contador_fase + 1) % 12) {
      pausa_fase_1 = 0;
      pausa_fase_2 = 1;
   }

   if (contador_fase == finalfase + 5)
      fase = 0;

}

void fase4() {

   atualiza_valores();

   atualiza_display();
   verificar_botoes();

   if (contador_fase == finalfase + 5)
      fase = 0;

}

void atualiza_valores() {
   unidade = unidade_atual;
   dezena = dezena_atual;
   centena = centena_atual;
   milhar = milhar_atual;
}

void escolha_de_fase() {

   if (!input(S4)) {
      fase = 4;
   }

   if (!input(S3)) {
      fase = 3;
   }
   if (!input(S2)) {
      fase = 2;
   }
   if (!input(S1)) {
      fase = 1;

   }
   if (fase) {

      output_low(DM);
      output_low(DD);
      output_low(DC);
      output_low(DU);
      tempo_inicio = 3;
      intervalo_incremento = intervalo_incremento * 2;
      output_high(DU);

      while (tempo_inicio > 0) {
         unidade = tempo_inicio;
         dezena = 12;
         centena = 12; 
         milhar = tempo_inicio;
         atualiza_display();
         delay(30);

      }
      intervalo_incremento = intervalo_incremento / 2;
   }
}

void mostrar_falha() {

   tempo_inicio = 7;

   unidade = 12;
   if ((contador_fase % 10)) {
      dezena = -(contador_fase % 10) + 10;
      centena = -((contador_fase / 10) % 10) + 9;
   } else {
      dezena = 0;
      centena = -((contador_fase / 10) % 10) + 10;
   }

   milhar = 12;

   while (tempo_inicio) {
      atualiza_display();

      delay(15);
   }
}

void tela_inicial() {

   if (contador_tela_inicial == 1 || contador_tela_inicial == 2) {

      output_low(DM);
      output_low(DU);

      if (alternar_tela_inicial) {
         output_low(DC);
         output_high(DD);
         if (!pasou_fase_3) {
            output_d(listadisplay3[contador_tela_inicial]);
         } else {
            output_d(listadisplay3[contador_tela_inicial + 6]);
         }

         alternar_tela_inicial = 0;
      } else {
         output_low(DD);
         output_high(DC);

         if (!pasou_fase_2) {
            output_d(listadisplay2[contador_tela_inicial]);
         } else {
            output_d(listadisplay2[contador_tela_inicial + 6]);
         }

         alternar_tela_inicial = 1;
      }

   } else {
      output_low(DD);
      output_low(DC);

      if (alternar_tela_inicial) {
         output_low(DM);
         output_high(DU);

         if (!pasou_fase_4) {
            output_d(listadisplay4[contador_tela_inicial]);
         } else {
            output_d(listadisplay4[contador_tela_inicial + 6]);
         }

         alternar_tela_inicial = 0;
      } else {
         output_low(DU);
         output_high(DM);

         if (!pasou_fase_1) {
            output_d(listadisplay1[contador_tela_inicial]);
         } else {
            output_d(listadisplay1[contador_tela_inicial + 6]);
         }

         alternar_tela_inicial = 1;
      }
   }
   delay(35);

}

void atualiza_display() {
   delay(25);
   if (input_state(DU)) {
      output_low(DU);
      output_high(DD);
      output_d(display_numbers[dezena]);
   } else if (input_state(DD)) {
      output_low(DD);
      output_high(DC);
      output_d(display_numbers[centena]);
   } else if (input_state(DC)) {
      output_low(DC);
      output_high(DM);
      output_d(display_numbers[milhar]);
   } else {
      output_low(DM);
      output_high(DU);
      output_d(display_numbers[unidade]);
   }
}

void delay(int8 n) {
   int8 i;
   for (i = 0; i < n; i++) {
      // NOP
   }
}

void verificar_botoes() {
   if (!input(S4) && !unidade_ativode) {
      unidade_ativo = 1;
      unidade_ativode = 1;
   }

   if (!input(S3) && !dezena_ativode) {
      dezena_ativo = 1;
      dezena_ativode = 1;
   }
   if (!input(S2) && !centena_ativode) {
      centena_ativo = 1;
      centena_ativode = 1;
   }
   if (!input(S1) && !milhar_ativode) {
      milhar_ativo = 1;
      milhar_ativode = 1;
   }

   if (unidade_ativode) {
      unidade_ativodecont--;
      if (!unidade_ativodecont) {
         unidade_ativodecont = V_CONTADOR_DECREMENTO;
         unidade_ativode = 0;
      }
   }
   if (dezena_ativode) {
      dezena_ativodecont--;
      if (!dezena_ativodecont) {
         dezena_ativodecont = V_CONTADOR_DECREMENTO;
         dezena_ativode = 0;
      }
   }
   if (centena_ativode) {
      centena_ativodecont--;
      if (!centena_ativodecont) {
         centena_ativodecont = V_CONTADOR_DECREMENTO;
         centena_ativode = 0;
      }
   }
   if (milhar_ativode) {
      milhar_ativodecont--;
      if (!milhar_ativodecont) {
         milhar_ativodecont = V_CONTADOR_DECREMENTO;
         milhar_ativode = 0;
      }
   }

}

void verificar_erro_nove() {
   if ((unidade_ativo && unidade) || (dezena_ativo && dezena) || (centena_ativo && centena) || (milhar_ativo && milhar)) {
      fase = 0;
   }
}

void verificar_erro_zero() {
   if ((!unidade_ativo && !unidade) || (!dezena_ativo && !dezena) || (!centena_ativo && !centena) || (!milhar_ativo && !milhar)) {
      fase = 0;
   }

}

void testalista() {
   lista_u();
   lista_d();
   lista_c();
   lista_m();

}

void lista_u() {

   if (fase == 1)
      unidade_atual = u1[contador_u] - decremento_u;

   if (fase == 2)
      unidade_atual = u2[contador_u] - decremento_u;

   if (fase == 3)
      unidade_atual = u3[contador_u] - decremento_u;

   if (fase == 4)
      unidade_atual = u4[contador_u] - decremento_u;

   if (unidade_atual <= 9) {
      if (!unidade_atual) {
         contador_u++;
         decremento_u = 0;
      } else {
         decremento_u++;
      }
   } else {
      contador_u++;
   }

}
void lista_d() {

   if (fase == 1)
      dezena_atual = d1[contador_d] - decremento_d;

   if (fase == 2)
      dezena_atual = d2[contador_d] - decremento_d;

   if (fase == 3)
      dezena_atual = d3[contador_d] - decremento_d;

   if (fase == 4)
      dezena_atual = d4[contador_d] - decremento_d;

   if (dezena_atual <= 9) {
      if (!dezena_atual) {
         contador_d++;
         decremento_d = 0;
      } else {
         decremento_d++;
      }
   } else {
      contador_d++;
   }

}
void lista_c() {

   if (fase == 1)
      centena_atual = c1[contador_c] - decremento_c;

   if (fase == 2)
      centena_atual = c2[contador_c] - decremento_c;

   if (fase == 3)
      centena_atual = c3[contador_c] - decremento_c;

   if (fase == 4)
      centena_atual = c4[contador_c] - decremento_c;

   if (centena_atual <= 9) {
      if (!centena_atual) {
         contador_c++;
         decremento_c = 0;
      } else {
         decremento_c++;
      }
   } else {
      contador_c++;
   }

}
void lista_m() {

   if (fase == 1)
      milhar_atual = m1[contador_m] - decremento_m;

   if (fase == 2)
      milhar_atual = m2[contador_m] - decremento_m;

   if (fase == 3)
      milhar_atual = m3[contador_m] - decremento_m;

   if (fase == 4)
      milhar_atual = m4[contador_m] - decremento_m;

   if (milhar_atual <= 9) {
      if (!milhar_atual) {
         contador_m++;
         decremento_m = 0;
      } else {
         decremento_m++;
      }
   } else {
      contador_m++;
   }

}
